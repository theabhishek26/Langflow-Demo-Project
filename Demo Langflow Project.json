{
  "data": {
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-KmTym",
            "name": "message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "Agent-TjOL0",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__ChatInput-KmTym{œdataTypeœ:œChatInputœ,œidœ:œChatInput-KmTymœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Agent-TjOL0{œfieldNameœ:œinput_valueœ,œidœ:œAgent-TjOL0œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ChatInput-KmTym",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-KmTymœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Agent-TjOL0",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œAgent-TjOL0œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Agent",
            "id": "Agent-TjOL0",
            "name": "response",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-GLwqa",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__Agent-TjOL0{œdataTypeœ:œAgentœ,œidœ:œAgent-TjOL0œ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-GLwqa{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-GLwqaœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "Agent-TjOL0",
        "sourceHandle": "{œdataTypeœ:œAgentœ,œidœ:œAgent-TjOL0œ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-GLwqa",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-GLwqaœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "GmailAPI",
            "id": "GmailAPI-TemEl",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-TjOL0",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__GmailAPI-TemEl{œdataTypeœ:œGmailAPIœ,œidœ:œGmailAPI-TemElœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-TjOL0{œfieldNameœ:œtoolsœ,œidœ:œAgent-TjOL0œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "GmailAPI-TemEl",
        "sourceHandle": "{œdataTypeœ:œGmailAPIœ,œidœ:œGmailAPI-TemElœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-TjOL0",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-TjOL0œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ComposioGoogleCalendarAPIComponent",
            "id": "ComposioGoogleCalendarAPIComponent-UxH4R",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-TjOL0",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__ComposioGoogleCalendarAPIComponent-UxH4R{œdataTypeœ:œComposioGoogleCalendarAPIComponentœ,œidœ:œComposioGoogleCalendarAPIComponent-UxH4Rœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-TjOL0{œfieldNameœ:œtoolsœ,œidœ:œAgent-TjOL0œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "ComposioGoogleCalendarAPIComponent-UxH4R",
        "sourceHandle": "{œdataTypeœ:œComposioGoogleCalendarAPIComponentœ,œidœ:œComposioGoogleCalendarAPIComponent-UxH4Rœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-TjOL0",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-TjOL0œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "id": "ChatInput-KmTym",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get chat inputs from the Playground.",
            "display_name": "Chat Input",
            "documentation": "https://docs.langflow.org/components-io#chat-input",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.5.1",
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Chat Message",
                "group_outputs": false,
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    documentation: str = \"https://docs.langflow.org/components-io#chat-input\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Input Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n            temp_file=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Chat Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
              },
              "files": {
                "_input_type": "FileInput",
                "advanced": true,
                "display_name": "Files",
                "dynamic": false,
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "file_path": "",
                "info": "Files to be sent with the message.",
                "list": true,
                "list_add_label": "Add More",
                "name": "files",
                "placeholder": "",
                "required": false,
                "show": true,
                "temp_file": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Input Text",
                "dynamic": false,
                "info": "Message to be passed as input.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatInput"
        },
        "dragging": false,
        "id": "ChatInput-KmTym",
        "measured": {
          "height": 48,
          "width": 192
        },
        "position": {
          "x": -62.99110856403543,
          "y": 158.3472029652065
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ChatOutput-GLwqa",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "https://docs.langflow.org/components-io#chat-output",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color",
              "clean_data"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.5.1",
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Output Message",
                "group_outputs": false,
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "clean_data": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Basic Clean Data",
                "dynamic": false,
                "info": "Whether to clean the data",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from collections.abc import Generator\nfrom typing import Any\n\nimport orjson\nfrom fastapi.encoders import jsonable_encoder\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.helpers.data import safe_convert\nfrom langflow.inputs.inputs import BoolInput, DropdownInput, HandleInput, MessageTextInput\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.template.field.base import Output\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    documentation: str = \"https://docs.langflow.org/components-io#chat-output\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Inputs\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Output Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _serialize_data(self, data: Data) -> str:\n        \"\"\"Serialize Data object to JSON string.\"\"\"\n        # Convert data.data to JSON-serializable format\n        serializable_data = jsonable_encoder(data.data)\n        # Serialize with orjson, enabling pretty printing with indentation\n        json_bytes = orjson.dumps(serializable_data, option=orjson.OPT_INDENT_2)\n        # Convert bytes to string and wrap in Markdown code blocks\n        return \"```json\\n\" + json_bytes.decode(\"utf-8\") + \"\\n```\"\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([safe_convert(item, clean_data=self.clean_data) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return safe_convert(self.input_value)\n"
              },
              "data_template": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Data Template",
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "data_template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Inputs",
                "dynamic": false,
                "info": "Message to be passed as output.",
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatOutput"
        },
        "dragging": false,
        "id": "ChatOutput-GLwqa",
        "measured": {
          "height": 48,
          "width": 192
        },
        "position": {
          "x": 985.0000000000002,
          "y": 354.26420209949055
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "Agent-TjOL0",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "category": "agents",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Define the agent's instructions, then enter a task to complete using tools.",
            "display_name": "Agent",
            "documentation": "https://docs.langflow.org/agents",
            "edited": false,
            "field_order": [
              "agent_llm",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout",
              "system_prompt",
              "n_messages",
              "tools",
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "agent_description",
              "add_current_date_tool"
            ],
            "frozen": false,
            "icon": "bot",
            "key": "Agent",
            "last_updated": "2025-09-18T12:29:10.952Z",
            "legacy": false,
            "lf_version": "1.5.1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Response",
                "group_outputs": false,
                "method": "message_response",
                "name": "response",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 1.1732828199964098e-19,
            "template": {
              "_type": "Component",
              "add_current_date_tool": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Current Date",
                "dynamic": false,
                "info": "If true, will add a tool to the agent that returns the current date.",
                "list": false,
                "list_add_label": "Add More",
                "name": "add_current_date_tool",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "agent_description": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Agent Description [Deprecated]",
                "dynamic": false,
                "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "agent_description",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "A helpful assistant with access to the following tools:"
              },
              "agent_llm": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model Provider",
                "dynamic": false,
                "info": "The provider of the language model that the agent will use to generate responses.",
                "input_types": [],
                "name": "agent_llm",
                "options": [
                  "Anthropic",
                  "Google Generative AI",
                  "Groq",
                  "OpenAI",
                  "Custom"
                ],
                "options_metadata": [
                  {
                    "icon": "Anthropic"
                  },
                  {
                    "icon": "GoogleGenerativeAI"
                  },
                  {
                    "icon": "Groq"
                  },
                  {
                    "icon": "OpenAI"
                  },
                  {
                    "icon": "brain"
                  }
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "OpenAI"
              },
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "input_types": [],
                "load_from_db": false,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers.current_date import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.custom_component.component import _get_component_toolkit\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.field_typing import Tool\nfrom langflow.io import BoolInput, DropdownInput, IntInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nMODEL_PROVIDERS_LIST = [\"Anthropic\", \"Google Generative AI\", \"Groq\", \"OpenAI\"]\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    documentation: str = \"https://docs.langflow.org/agents\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*MODEL_PROVIDERS_LIST, \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in MODEL_PROVIDERS_LIST] + [{\"icon\": \"brain\"}],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Chat History Messages\",\n            value=100,\n            info=\"Number of chat history messages to retrieve.\",\n            advanced=True,\n            show=True,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        # removed memory inputs from agent component\n        # *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n            if isinstance(self.chat_history, Message):\n                self.chat_history = [self.chat_history]\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n            # note the tools are not required to run the agent, hence the validation removed.\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools or [],\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        # TODO: This is a temporary fix to avoid message duplication. We should develop a function for this.\n        messages = (\n            await MemoryComponent(**self.get_base_args())\n            .set(session_id=self.graph.session_id, order=\"Ascending\", n_messages=self.n_messages)\n            .retrieve_messages()\n        )\n        return [\n            message for message in messages if getattr(message, \"id\", None) != getattr(self.input_value, \"id\", None)\n        ]\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {}\n        for input_ in inputs:\n            if hasattr(self, f\"{prefix}{input_.name}\"):\n                model_kwargs[input_.name] = getattr(self, f\"{prefix}{input_.name}\")\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                    options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())]\n                    + [{\"icon\": \"brain\"}],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n\n    async def _get_tools(self) -> list[Tool]:\n        component_toolkit = _get_component_toolkit()\n        tools_names = self._build_tools_names()\n        agent_description = self.get_tool_description()\n        # TODO: Agent Description Depreciated Feature to be removed\n        description = f\"{agent_description}{tools_names}\"\n        tools = component_toolkit(component=self).get_tools(\n            tool_name=\"Call_Agent\", tool_description=description, callbacks=self.get_langchain_callbacks()\n        )\n        if hasattr(self, \"tools_metadata\"):\n            tools = component_toolkit(component=self, metadata=self.tools_metadata).update_tools_metadata(tools=tools)\n        return tools\n"
              },
              "handle_parsing_errors": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Handle Parse Errors",
                "dynamic": false,
                "info": "Should the Agent fix errors when reading user input for better processing?",
                "list": false,
                "list_add_label": "Add More",
                "name": "handle_parsing_errors",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "input_value": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "info": "The input provided by the user for the agent to process.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "json_mode": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "JSON Mode",
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "list": false,
                "list_add_label": "Add More",
                "name": "json_mode",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "max_iterations": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Iterations",
                "dynamic": false,
                "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_iterations",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 15
              },
              "max_retries": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Retries",
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_retries",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 5
              },
              "max_tokens": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Tokens",
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_tokens",
                "placeholder": "",
                "range_spec": {
                  "max": 128000,
                  "min": 0,
                  "step": 0.1,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "model_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "list": false,
                "list_add_label": "Add More",
                "name": "model_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {},
                "display_name": "Model Name",
                "dynamic": false,
                "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                "name": "model_name",
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4.1",
                  "gpt-4.1-mini",
                  "gpt-4.1-nano",
                  "gpt-4.5-preview",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "o1",
                  "o1-mini",
                  "o1-pro",
                  "o3-mini",
                  "o3",
                  "o3-pro",
                  "o4-mini",
                  "o4-mini-high"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": false,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "gpt-4o-mini"
              },
              "n_messages": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Number of Chat History Messages",
                "dynamic": false,
                "info": "Number of chat history messages to retrieve.",
                "list": false,
                "list_add_label": "Add More",
                "name": "n_messages",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 100
              },
              "openai_api_base": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "openai_api_base",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "seed": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Seed",
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "list": false,
                "list_add_label": "Add More",
                "name": "seed",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "system_prompt": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Agent Instructions",
                "dynamic": false,
                "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "system_prompt",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "You are a helpful assistant that can use tools to answer questions and perform tasks."
              },
              "temperature": {
                "_input_type": "SliderInput",
                "advanced": true,
                "display_name": "Temperature",
                "dynamic": false,
                "info": "",
                "max_label": "",
                "max_label_icon": "",
                "min_label": "",
                "min_label_icon": "",
                "name": "temperature",
                "placeholder": "",
                "range_spec": {
                  "max": 1,
                  "min": 0,
                  "step": 0.01,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "title_case": false,
                "tool_mode": false,
                "type": "slider",
                "value": 0.1
              },
              "timeout": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Timeout",
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "list": false,
                "list_add_label": "Add More",
                "name": "timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 700
              },
              "tools": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Tools",
                "dynamic": false,
                "info": "These are the tools that the agent can use to help with tasks.",
                "input_types": [
                  "Tool"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "tools",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "verbose": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Verbose",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "verbose",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "Agent"
        },
        "dragging": false,
        "id": "Agent-TjOL0",
        "measured": {
          "height": 594,
          "width": 320
        },
        "position": {
          "x": 465.1765582034385,
          "y": 261.41676921984265
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "GmailAPI-TemEl",
          "node": {
            "base_classes": [
              "DataFrame"
            ],
            "beta": false,
            "category": "composio",
            "conditional_paths": [],
            "custom_fields": {},
            "display_name": "Gmail",
            "documentation": "https://docs.composio.dev",
            "edited": false,
            "field_order": [
              "entity_id",
              "api_key",
              "auth_link",
              "action",
              "recipient_email",
              "subject",
              "body",
              "cc",
              "bcc",
              "is_html",
              "gmail_user_id",
              "max_results",
              "message_id",
              "thread_id",
              "query",
              "message_body",
              "label_name",
              "label_id",
              "label_ids",
              "label_list_visibility",
              "message_list_visibility",
              "page_token",
              "include_spam_trash",
              "format",
              "resource_name",
              "person_fields",
              "attachment_id",
              "file_name",
              "attachment"
            ],
            "frozen": false,
            "icon": "Google",
            "key": "GmailAPI",
            "last_updated": "2025-09-18T13:07:19.866Z",
            "legacy": false,
            "lf_version": "1.5.1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "group_outputs": false,
                "hidden": null,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 2.220446049250313e-16,
            "template": {
              "_type": "Component",
              "action": {
                "_input_type": "SortableListInput",
                "advanced": false,
                "display_name": "Action",
                "dynamic": false,
                "helper_text": null,
                "helper_text_metadata": {},
                "info": "",
                "limit": 1,
                "name": "action",
                "options": [
                  {
                    "metadata": "GMAIL_SEND_EMAIL",
                    "name": "Send Email"
                  },
                  {
                    "metadata": "GMAIL_FETCH_EMAILS",
                    "name": "Fetch Emails"
                  },
                  {
                    "metadata": "GMAIL_GET_PROFILE",
                    "name": "Get User Profile"
                  },
                  {
                    "metadata": "GMAIL_FETCH_MESSAGE_BY_MESSAGE_ID",
                    "name": "Get Email By ID"
                  },
                  {
                    "metadata": "GMAIL_CREATE_EMAIL_DRAFT",
                    "name": "Create Draft Email"
                  },
                  {
                    "metadata": "GMAIL_FETCH_MESSAGE_BY_THREAD_ID",
                    "name": "Get Message By Thread ID"
                  },
                  {
                    "metadata": "GMAIL_LIST_THREADS",
                    "name": "List Email Threads"
                  },
                  {
                    "metadata": "GMAIL_REPLY_TO_THREAD",
                    "name": "Reply To Thread"
                  },
                  {
                    "metadata": "GMAIL_LIST_LABELS",
                    "name": "List Email Labels"
                  },
                  {
                    "metadata": "GMAIL_CREATE_LABEL",
                    "name": "Create Email Label"
                  },
                  {
                    "metadata": "GMAIL_GET_PEOPLE",
                    "name": "Get Contacts"
                  },
                  {
                    "metadata": "GMAIL_REMOVE_LABEL",
                    "name": "Delete Email Label"
                  },
                  {
                    "metadata": "GMAIL_GET_ATTACHMENT",
                    "name": "Get Attachment"
                  }
                ],
                "placeholder": "Select action",
                "real_time_refresh": true,
                "required": false,
                "search_category": [],
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "sortableList",
                "value": "disabled"
              },
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "Composio API Key",
                "dynamic": false,
                "info": "",
                "input_types": [],
                "load_from_db": false,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "real_time_refresh": true,
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "attachment": {
                "_input_type": "FileInput",
                "advanced": false,
                "display_name": "Add Attachment",
                "dynamic": false,
                "fileTypes": [
                  "csv",
                  "txt",
                  "doc",
                  "docx",
                  "xls",
                  "xlsx",
                  "pdf",
                  "png",
                  "jpg",
                  "jpeg",
                  "gif",
                  "zip",
                  "rar",
                  "ppt",
                  "pptx"
                ],
                "file_path": "",
                "info": "Add an attachment",
                "list": false,
                "list_add_label": "Add More",
                "name": "attachment",
                "placeholder": "",
                "required": false,
                "show": false,
                "temp_file": false,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "attachment_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Attachment ID",
                "dynamic": false,
                "info": "Id of the attachment",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "attachment_id",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "auth_link": {
                "_input_type": "AuthInput",
                "advanced": false,
                "auth_tooltip": "Disconnect",
                "dynamic": false,
                "info": "",
                "name": "auth_link",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "auth",
                "value": "validated"
              },
              "bcc": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "BCC",
                "dynamic": false,
                "info": "Email addresses to BCC (Blind Carbon Copy) in the email, separated by commas",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "bcc",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "body": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Body",
                "dynamic": false,
                "info": "Content of the email",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "body",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "cc": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "CC",
                "dynamic": false,
                "info": "Email addresses to CC (Carbon Copy) in the email, separated by commas",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "cc",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import json\nfrom typing import Any\n\nfrom composio import Action\n\nfrom langflow.base.composio.composio_base import ComposioBaseComponent\nfrom langflow.inputs.inputs import (\n    BoolInput,\n    FileInput,\n    IntInput,\n    MessageTextInput,\n)\nfrom langflow.logging import logger\n\n\nclass ComposioGmailAPIComponent(ComposioBaseComponent):\n    \"\"\"Gmail API component for interacting with Gmail services.\"\"\"\n\n    display_name: str = \"Gmail\"\n    name = \"GmailAPI\"\n    icon = \"Google\"\n    documentation: str = \"https://docs.composio.dev\"\n    app_name = \"gmail\"\n\n    # Gmail-specific actions\n    _actions_data: dict = {\n        \"GMAIL_SEND_EMAIL\": {\n            \"display_name\": \"Send Email\",\n            \"action_fields\": [\n                \"recipient_email\",\n                \"subject\",\n                \"body\",\n                \"cc\",\n                \"bcc\",\n                \"is_html\",\n                \"gmail_user_id\",\n                \"attachment\",\n            ],\n        },\n        \"GMAIL_FETCH_EMAILS\": {\n            \"display_name\": \"Fetch Emails\",\n            \"action_fields\": [\n                \"gmail_user_id\",\n                \"max_results\",\n                \"query\",\n                \"page_token\",\n                \"label_ids\",\n                \"include_spam_trash\",\n            ],\n            \"get_result_field\": True,\n            \"result_field\": \"messages\",\n        },\n        \"GMAIL_GET_PROFILE\": {\n            \"display_name\": \"Get User Profile\",\n            \"action_fields\": [\"gmail_user_id\"],\n        },\n        \"GMAIL_FETCH_MESSAGE_BY_MESSAGE_ID\": {\n            \"display_name\": \"Get Email By ID\",\n            \"action_fields\": [\"message_id\", \"gmail_user_id\", \"format\"],\n            \"get_result_field\": False,\n        },\n        \"GMAIL_CREATE_EMAIL_DRAFT\": {\n            \"display_name\": \"Create Draft Email\",\n            \"action_fields\": [\n                \"recipient_email\",\n                \"subject\",\n                \"body\",\n                \"cc\",\n                \"bcc\",\n                \"is_html\",\n                \"attachment\",\n                \"gmail_user_id\",\n            ],\n        },\n        \"GMAIL_FETCH_MESSAGE_BY_THREAD_ID\": {\n            \"display_name\": \"Get Message By Thread ID\",\n            \"action_fields\": [\"thread_id\", \"page_token\", \"gmail_user_id\"],\n            \"get_result_field\": False,\n        },\n        \"GMAIL_LIST_THREADS\": {\n            \"display_name\": \"List Email Threads\",\n            \"action_fields\": [\"max_results\", \"query\", \"gmail_user_id\", \"page_token\"],\n            \"get_result_field\": True,\n            \"result_field\": \"threads\",\n        },\n        \"GMAIL_REPLY_TO_THREAD\": {\n            \"display_name\": \"Reply To Thread\",\n            \"action_fields\": [\"thread_id\", \"message_body\", \"recipient_email\", \"gmail_user_id\", \"cc\", \"bcc\", \"is_html\"],\n        },\n        \"GMAIL_LIST_LABELS\": {\n            \"display_name\": \"List Email Labels\",\n            \"action_fields\": [\"gmail_user_id\"],\n            \"get_result_field\": True,\n            \"result_field\": \"labels\",\n        },\n        \"GMAIL_CREATE_LABEL\": {\n            \"display_name\": \"Create Email Label\",\n            \"action_fields\": [\"label_name\", \"label_list_visibility\", \"message_list_visibility\", \"gmail_user_id\"],\n        },\n        \"GMAIL_GET_PEOPLE\": {\n            \"display_name\": \"Get Contacts\",\n            \"action_fields\": [\"resource_name\", \"person_fields\"],\n            \"get_result_field\": True,\n            \"result_field\": \"people_data\",\n        },\n        \"GMAIL_REMOVE_LABEL\": {\n            \"display_name\": \"Delete Email Label\",\n            \"action_fields\": [\"label_id\", \"gmail_user_id\"],\n            \"get_result_field\": False,\n        },\n        \"GMAIL_GET_ATTACHMENT\": {\n            \"display_name\": \"Get Attachment\",\n            \"action_fields\": [\"message_id\", \"attachment_id\", \"file_name\", \"gmail_user_id\"],\n        },\n    }\n    _all_fields = {field for action_data in _actions_data.values() for field in action_data[\"action_fields\"]}\n    _bool_variables = {\"is_html\", \"include_spam_trash\"}\n\n    # Combine base inputs with Gmail-specific inputs\n    inputs = [\n        *ComposioBaseComponent._base_inputs,\n        # Email composition fields\n        MessageTextInput(\n            name=\"recipient_email\",\n            display_name=\"Recipient Email\",\n            info=\"Email address of the recipient\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"subject\",\n            display_name=\"Subject\",\n            info=\"Subject of the email\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"body\",\n            display_name=\"Body\",\n            required=True,\n            info=\"Content of the email\",\n            show=False,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"cc\",\n            display_name=\"CC\",\n            info=\"Email addresses to CC (Carbon Copy) in the email, separated by commas\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"bcc\",\n            display_name=\"BCC\",\n            info=\"Email addresses to BCC (Blind Carbon Copy) in the email, separated by commas\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"is_html\",\n            display_name=\"Is HTML\",\n            info=\"Specify whether the email body contains HTML content (true/false)\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        # Email retrieval and management fields\n        MessageTextInput(\n            name=\"gmail_user_id\",\n            display_name=\"User ID\",\n            info=\"The user's email address or 'me' for the authenticated user\",\n            show=False,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"max_results\",\n            display_name=\"Max Results\",\n            required=True,\n            info=\"Maximum number of emails to be returned\",\n            show=False,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"message_id\",\n            display_name=\"Message ID\",\n            info=\"The ID of the specific email message\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"thread_id\",\n            display_name=\"Thread ID\",\n            info=\"The ID of the email thread\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"query\",\n            display_name=\"Query\",\n            info=\"Search query to filter emails (e.g., 'from:someone@email.com' or 'subject:hello')\",\n            show=False,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"message_body\",\n            display_name=\"Message Body\",\n            info=\"The body content of the message to be sent\",\n            show=False,\n            advanced=True,\n        ),\n        # Label management fields\n        MessageTextInput(\n            name=\"label_name\",\n            display_name=\"Label Name\",\n            info=\"Name of the Gmail label to create, modify, or filter by\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"label_id\",\n            display_name=\"Label ID\",\n            info=\"The ID of the Gmail label\",\n            show=False,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"label_ids\",\n            display_name=\"Label Ids\",\n            info=\"Comma-separated list of label IDs to filter messages\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"label_list_visibility\",\n            display_name=\"Label List Visibility\",\n            info=\"The visibility of the label in the label list in the Gmail web interface\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"message_list_visibility\",\n            display_name=\"Message List Visibility\",\n            info=\"The visibility of the label in the message list in the Gmail web interface\",\n            show=False,\n            advanced=True,\n        ),\n        # Pagination and filtering\n        MessageTextInput(\n            name=\"page_token\",\n            display_name=\"Page Token\",\n            info=\"Token for retrieving the next page of results\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"include_spam_trash\",\n            display_name=\"Include messages from Spam/Trash\",\n            info=\"Include messages from SPAM and TRASH in the results\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"format\",\n            display_name=\"Format\",\n            info=\"The format to return the message in. Possible values: minimal, full, raw, metadata\",\n            show=False,\n            advanced=True,\n        ),\n        # Contact management fields\n        MessageTextInput(\n            name=\"resource_name\",\n            display_name=\"Resource Name\",\n            info=\"The resource name of the person to provide information about\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"person_fields\",\n            display_name=\"Person fields\",\n            info=\"Fields to return for the person. Multiple fields can be specified by separating them with commas\",\n            show=False,\n            advanced=True,\n        ),\n        # Attachment handling\n        MessageTextInput(\n            name=\"attachment_id\",\n            display_name=\"Attachment ID\",\n            info=\"Id of the attachment\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        MessageTextInput(\n            name=\"file_name\",\n            display_name=\"File name\",\n            info=\"File name of the attachment file\",\n            show=False,\n            required=True,\n            advanced=False,\n        ),\n        FileInput(\n            name=\"attachment\",\n            display_name=\"Add Attachment\",\n            file_types=[\n                \"csv\",\n                \"txt\",\n                \"doc\",\n                \"docx\",\n                \"xls\",\n                \"xlsx\",\n                \"pdf\",\n                \"png\",\n                \"jpg\",\n                \"jpeg\",\n                \"gif\",\n                \"zip\",\n                \"rar\",\n                \"ppt\",\n                \"pptx\",\n            ],\n            info=\"Add an attachment\",\n            show=False,\n        ),\n    ]\n\n    def execute_action(self):\n        \"\"\"Execute action and return response as Message.\"\"\"\n        toolset = self._build_wrapper()\n\n        try:\n            self._build_action_maps()\n            # Get the display name from the action list\n            display_name = self.action[0][\"name\"] if isinstance(self.action, list) and self.action else self.action\n            # Use the display_to_key_map to get the action key\n            action_key = self._display_to_key_map.get(display_name)\n            if not action_key:\n                msg = f\"Invalid action: {display_name}\"\n                raise ValueError(msg)\n\n            enum_name = getattr(Action, action_key)\n            params = {}\n            if action_key in self._actions_data:\n                for field in self._actions_data[action_key][\"action_fields\"]:\n                    value = getattr(self, field)\n\n                    if value is None or value == \"\":\n                        continue\n\n                    if field in [\"cc\", \"bcc\", \"label_ids\"] and value:\n                        value = [item.strip() for item in value.split(\",\")]\n\n                    if field in self._bool_variables:\n                        value = bool(value)\n\n                    params[field] = value\n\n            if params.get(\"gmail_user_id\"):\n                params[\"user_id\"] = params.pop(\"gmail_user_id\")\n\n            result = toolset.execute_action(\n                action=enum_name,\n                params=params,\n            )\n            if not result.get(\"successful\"):\n                message_str = result.get(\"data\", {}).get(\"message\", \"{}\")\n                try:\n                    error_data = json.loads(message_str).get(\"error\", {})\n                except json.JSONDecodeError:\n                    error_data = {\"error\": \"Failed to get exact error details\"}\n                return {\n                    \"code\": error_data.get(\"code\"),\n                    \"message\": error_data.get(\"message\"),\n                    \"errors\": error_data.get(\"errors\", []),\n                    \"status\": error_data.get(\"status\"),\n                }\n\n            result_data = result.get(\"data\", {})\n            actions_data = self._actions_data.get(action_key, {})\n            # If 'get_result_field' is True and 'result_field' is specified, extract the data\n            # using 'result_field'. Otherwise, fall back to the entire 'data' field in the response.\n            if actions_data.get(\"get_result_field\") and actions_data.get(\"result_field\"):\n                result_data = result_data.get(actions_data.get(\"result_field\"), result.get(\"data\", []))\n            if len(result_data) != 1 and not actions_data.get(\"result_field\") and actions_data.get(\"get_result_field\"):\n                msg = f\"Expected a dict with a single key, got {len(result_data)} keys: {result_data.keys()}\"\n                raise ValueError(msg)\n            return result_data  # noqa: TRY300\n        except Exception as e:\n            logger.error(f\"Error executing action: {e}\")\n            display_name = self.action[0][\"name\"] if isinstance(self.action, list) and self.action else str(self.action)\n            msg = f\"Failed to execute {display_name}: {e!s}\"\n            raise ValueError(msg) from e\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        return super().update_build_config(build_config, field_value, field_name)\n\n    def set_default_tools(self):\n        self._default_tools = {\n            \"GMAIL_SEND_EMAIL\",\n            \"GMAIL_FETCH_EMAILS\",\n        }\n"
              },
              "entity_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Entity ID",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "entity_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "default"
              },
              "file_name": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "File name",
                "dynamic": false,
                "info": "File name of the attachment file",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "file_name",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "format": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Format",
                "dynamic": false,
                "info": "The format to return the message in. Possible values: minimal, full, raw, metadata",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "format",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "gmail_user_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "User ID",
                "dynamic": false,
                "info": "The user's email address or 'me' for the authenticated user",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "gmail_user_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "include_spam_trash": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Include messages from Spam/Trash",
                "dynamic": false,
                "info": "Include messages from SPAM and TRASH in the results",
                "list": false,
                "list_add_label": "Add More",
                "name": "include_spam_trash",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "is_html": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Is HTML",
                "dynamic": false,
                "info": "Specify whether the email body contains HTML content (true/false)",
                "list": false,
                "list_add_label": "Add More",
                "name": "is_html",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "label_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Label ID",
                "dynamic": false,
                "info": "The ID of the Gmail label",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "label_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "label_ids": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Label Ids",
                "dynamic": false,
                "info": "Comma-separated list of label IDs to filter messages",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "label_ids",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "label_list_visibility": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Label List Visibility",
                "dynamic": false,
                "info": "The visibility of the label in the label list in the Gmail web interface",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "label_list_visibility",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "label_name": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Label Name",
                "dynamic": false,
                "info": "Name of the Gmail label to create, modify, or filter by",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "label_name",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "max_results": {
                "_input_type": "IntInput",
                "advanced": false,
                "display_name": "Max Results",
                "dynamic": false,
                "info": "Maximum number of emails to be returned",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_results",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "message_body": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Message Body",
                "dynamic": false,
                "info": "The body content of the message to be sent",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "message_body",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "message_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Message ID",
                "dynamic": false,
                "info": "The ID of the specific email message",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "message_id",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "message_list_visibility": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Message List Visibility",
                "dynamic": false,
                "info": "The visibility of the label in the message list in the Gmail web interface",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "message_list_visibility",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "page_token": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Page Token",
                "dynamic": false,
                "info": "Token for retrieving the next page of results",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "page_token",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "person_fields": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Person fields",
                "dynamic": false,
                "info": "Fields to return for the person. Multiple fields can be specified by separating them with commas",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "person_fields",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "query": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Query",
                "dynamic": false,
                "info": "Search query to filter emails (e.g., 'from:someone@email.com' or 'subject:hello')",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "query",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "recipient_email": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Recipient Email",
                "dynamic": false,
                "info": "Email address of the recipient",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "recipient_email",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "resource_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Resource Name",
                "dynamic": false,
                "info": "The resource name of the person to provide information about",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "resource_name",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "subject": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Subject",
                "dynamic": false,
                "info": "Subject of the email",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "subject",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "thread_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Thread ID",
                "dynamic": false,
                "info": "The ID of the email thread",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "thread_id",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "attachment": {
                        "default": null,
                        "description": "File to attach to the email.",
                        "examples": [],
                        "title": "Attachment",
                        "type": "string"
                      },
                      "bcc": {
                        "default": [],
                        "description": "'Bcc' (blind carbon copy) recipient email addresses.",
                        "examples": [
                          [
                            "bcc.recipient@example.com"
                          ]
                        ],
                        "items": {
                          "type": "string"
                        },
                        "title": "Bcc",
                        "type": "array"
                      },
                      "body": {
                        "description": "Email body content (plain text or HTML); `is_html` must be True if HTML. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "Hello Team,\n\nPlease find the attached report for your review.\n\nBest regards,\nYour Name",
                          "<h1>Meeting Confirmation</h1><p>This email confirms our meeting scheduled for next Tuesday.</p>"
                        ],
                        "title": "Body",
                        "type": "string"
                      },
                      "cc": {
                        "default": [],
                        "description": "'Cc' (carbon copy) recipient email addresses.",
                        "examples": [
                          [
                            "cc.recipient1@example.com",
                            "cc.recipient2@example.com"
                          ]
                        ],
                        "items": {
                          "type": "string"
                        },
                        "title": "Cc",
                        "type": "array"
                      },
                      "extra_recipients": {
                        "default": [],
                        "description": "Additional 'To' recipient email addresses.",
                        "examples": [
                          [
                            "jane.doe@example.com",
                            "another.recipient@example.com"
                          ]
                        ],
                        "items": {
                          "type": "string"
                        },
                        "title": "Extra Recipients",
                        "type": "array"
                      },
                      "is_html": {
                        "default": false,
                        "description": "Set to True if `body` is HTML, otherwise the action may fail. Please provide a value of type boolean.",
                        "examples": [
                          "True",
                          "False"
                        ],
                        "title": "Is Html",
                        "type": "boolean"
                      },
                      "recipient_email": {
                        "description": "Primary recipient's email address. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "john.doe@example.com"
                        ],
                        "title": "Recipient Email",
                        "type": "string"
                      },
                      "subject": {
                        "description": "Email subject line. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "Project Update Q3",
                          "Meeting Reminder"
                        ],
                        "title": "Subject",
                        "type": "string"
                      },
                      "thread_id": {
                        "default": null,
                        "description": "ID of an existing Gmail thread to reply to; omit for new thread. Please provide a value of type string.",
                        "examples": [
                          "17f45ec49a9c3f1b"
                        ],
                        "title": "Thread Id",
                        "type": "string"
                      },
                      "user_id": {
                        "default": "me",
                        "description": "User's email address or 'me' for the authenticated user. Please provide a value of type string.",
                        "examples": [
                          "me",
                          "user@example.com"
                        ],
                        "title": "User Id",
                        "type": "string"
                      }
                    },
                    "description": "Creates a gmail email draft, supporting to/cc/bcc, subject, plain/html body (ensure `is html=true` for html), attachments, and threading.",
                    "display_description": "Creates a gmail email draft, supporting to/cc/bcc, subject, plain/html body (ensure `is html=true` for html), attachments, and threading.",
                    "display_name": "Create Draft Email",
                    "name": "gmail_create_email_draft",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GMAIL_CREATE_EMAIL_DRAFT"
                    ]
                  },
                  {
                    "args": {
                      "background_color": {
                        "default": null,
                        "description": "The background color of the label. Must be one of the predefined Gmail label colors. See https://developers.google.com/gmail/api/v1/reference/colors for allowed values. Please provide a value of type string.",
                        "examples": [
                          "#4285F4"
                        ],
                        "title": "Background Color",
                        "type": "string"
                      },
                      "label_list_visibility": {
                        "default": "labelShow",
                        "description": "Controls how the label is displayed in the label list in the Gmail sidebar. Please provide a value of type string.",
                        "examples": [
                          "labelShow",
                          "labelShowIfUnread",
                          "labelHide"
                        ],
                        "title": "Label List Visibility",
                        "type": "string"
                      },
                      "label_name": {
                        "description": "The name for the new label. Must be unique within the account, non-blank, maximum length 225 characters, cannot contain ',' or '/', not only whitespace, and must not be a reserved system label (e.g., INBOX, DRAFTS, SENT). Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "Work",
                          "Important Documents",
                          "Receipts 2024"
                        ],
                        "title": "Label Name",
                        "type": "string"
                      },
                      "message_list_visibility": {
                        "default": "show",
                        "description": "Controls how messages with this label are displayed in the message list. Please provide a value of type string.",
                        "examples": [
                          "show",
                          "hide"
                        ],
                        "title": "Message List Visibility",
                        "type": "string"
                      },
                      "text_color": {
                        "default": null,
                        "description": "The text color of the label. Must be one of the predefined Gmail label colors. See https://developers.google.com/gmail/api/v1/reference/colors for allowed values. Please provide a value of type string.",
                        "examples": [
                          "#000000"
                        ],
                        "title": "Text Color",
                        "type": "string"
                      },
                      "user_id": {
                        "default": "me",
                        "description": "The email address of the user in whose account the label will be created. Please provide a value of type string.",
                        "examples": [
                          "me",
                          "user@example.com"
                        ],
                        "title": "User Id",
                        "type": "string"
                      }
                    },
                    "description": "Creates a new label with a unique name in the specified user's gmail account.",
                    "display_description": "Creates a new label with a unique name in the specified user's gmail account.",
                    "display_name": "Create Email Label",
                    "name": "gmail_create_label",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GMAIL_CREATE_LABEL"
                    ]
                  },
                  {
                    "args": {
                      "ids_only": {
                        "default": false,
                        "description": "If true, only returns message IDs from the list API without fetching individual message details. Fastest option for getting just message IDs and thread IDs. Please provide a value of type boolean.",
                        "examples": [
                          "True",
                          "False"
                        ],
                        "title": "Ids Only",
                        "type": "boolean"
                      },
                      "include_payload": {
                        "default": true,
                        "description": "Set to true to include full message payload (headers, body, attachments); false for metadata only. Please provide a value of type boolean.",
                        "examples": [
                          "True",
                          "False"
                        ],
                        "title": "Include Payload",
                        "type": "boolean"
                      },
                      "include_spam_trash": {
                        "default": false,
                        "description": "Set to true to include messages from 'SPAM' and 'TRASH'. Please provide a value of type boolean.",
                        "examples": [
                          "True",
                          "False"
                        ],
                        "title": "Include Spam Trash",
                        "type": "boolean"
                      },
                      "label_ids": {
                        "default": null,
                        "description": "Filter by label IDs; only messages with all specified labels are returned. Common IDs: 'INBOX', 'SPAM', 'TRASH', 'UNREAD', 'STARRED', 'IMPORTANT', 'CATEGORY_PRIMARY' (alias 'CATEGORY_PERSONAL'), 'CATEGORY_SOCIAL', 'CATEGORY_PROMOTIONS', 'CATEGORY_UPDATES', 'CATEGORY_FORUMS'. Use 'listLabels' action for custom IDs.",
                        "examples": [],
                        "items": {
                          "type": "string"
                        },
                        "title": "Label Ids",
                        "type": "array"
                      },
                      "max_results": {
                        "default": 1,
                        "description": "Maximum number of messages to retrieve per page. Please provide a value of type integer.",
                        "examples": [
                          "10",
                          "100",
                          "500"
                        ],
                        "title": "Max Results",
                        "type": "integer"
                      },
                      "page_token": {
                        "default": null,
                        "description": "Token for retrieving a specific page, obtained from a previous response's `nextPageToken`. Omit for the first page. Please provide a value of type string.",
                        "examples": [],
                        "title": "Page Token",
                        "type": "string"
                      },
                      "query": {
                        "default": null,
                        "description": "Gmail advanced search query (e.g., 'from:user subject:meeting'). Supports operators like 'from:', 'to:', 'subject:', 'label:', 'has:attachment', 'is:unread', 'after:YYYY/MM/DD', 'before:YYYY/MM/DD', AND/OR/NOT. Use quotes for exact phrases. Omit for no query filter. Please provide a value of type string.",
                        "examples": [
                          "from:john@example.com is:unread",
                          "subject:meeting has:attachment",
                          "after:2024/01/01 before:2024/02/01",
                          "is:important OR is:starred",
                          "label:work -label:spam"
                        ],
                        "title": "Query",
                        "type": "string"
                      },
                      "user_id": {
                        "default": "me",
                        "description": "User's email address or 'me' for the authenticated user. Please provide a value of type string.",
                        "examples": [
                          "me",
                          "user@example.com"
                        ],
                        "title": "User Id",
                        "type": "string"
                      },
                      "verbose": {
                        "default": true,
                        "description": "If false, uses optimized concurrent metadata fetching for faster performance (~75% improvement). If true, uses standard detailed message fetching. When false, only essential fields (subject, sender, recipient, time, labels) are guaranteed. Please provide a value of type boolean.",
                        "examples": [
                          "True",
                          "False"
                        ],
                        "title": "Verbose",
                        "type": "boolean"
                      }
                    },
                    "description": "Fetches a list of email messages from a gmail account, supporting filtering, pagination, and optional full content retrieval.",
                    "display_description": "Fetches a list of email messages from a gmail account, supporting filtering, pagination, and optional full content retrieval.",
                    "display_name": "Fetch Emails",
                    "name": "gmail_fetch_emails",
                    "readonly": true,
                    "status": true,
                    "tags": [
                      "GMAIL_FETCH_EMAILS"
                    ]
                  },
                  {
                    "args": {
                      "format": {
                        "default": "full",
                        "description": "Format for message content: 'minimal' (ID/labels), 'full' (complete data), 'raw' (base64url string), 'metadata' (ID/labels/headers). Please provide a value of type string.",
                        "examples": [
                          "minimal",
                          "full",
                          "raw",
                          "metadata"
                        ],
                        "title": "Format",
                        "type": "string"
                      },
                      "message_id": {
                        "description": "Unique ID of the email message to retrieve, obtainable from actions like 'List Messages'. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "xsdfe3264vrfw"
                        ],
                        "title": "Message Id",
                        "type": "string"
                      },
                      "user_id": {
                        "default": "me",
                        "description": "User's email address or 'me' for the authenticated user. Please provide a value of type string.",
                        "examples": [
                          "user@example.com",
                          "me"
                        ],
                        "title": "User Id",
                        "type": "string"
                      }
                    },
                    "description": "Fetches a specific email message by its id, provided the `message id` exists and is accessible to the authenticated `user id`.",
                    "display_description": "Fetches a specific email message by its id, provided the `message id` exists and is accessible to the authenticated `user id`.",
                    "display_name": "Get Email By ID",
                    "name": "gmail_fetch_message_by_message_id",
                    "readonly": true,
                    "status": true,
                    "tags": [
                      "GMAIL_FETCH_MESSAGE_BY_MESSAGE_ID"
                    ]
                  },
                  {
                    "args": {
                      "page_token": {
                        "default": "",
                        "description": "Opaque page token for fetching a specific page of messages if results are paginated. Please provide a value of type string.",
                        "examples": [
                          "CiAKGhIKJdealEffectivelyPageToken"
                        ],
                        "title": "Page Token",
                        "type": "string"
                      },
                      "thread_id": {
                        "description": "Unique ID of the thread, obtainable from actions like 'listThreads' or 'fetchEmails'. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "xsdfe3264vrfw"
                        ],
                        "title": "Thread Id",
                        "type": "string"
                      },
                      "user_id": {
                        "default": "me",
                        "description": "The email address of the user. Please provide a value of type string.",
                        "examples": [
                          "me",
                          "user@example.com"
                        ],
                        "title": "User Id",
                        "type": "string"
                      }
                    },
                    "description": "Retrieves messages from a gmail thread using its `thread id`, where the thread must be accessible by the specified `user id`.",
                    "display_description": "Retrieves messages from a gmail thread using its `thread id`, where the thread must be accessible by the specified `user id`.",
                    "display_name": "Get Message By Thread ID",
                    "name": "gmail_fetch_message_by_thread_id",
                    "readonly": true,
                    "status": true,
                    "tags": [
                      "GMAIL_FETCH_MESSAGE_BY_THREAD_ID"
                    ]
                  },
                  {
                    "args": {
                      "attachment_id": {
                        "description": "ID of the attachment to retrieve. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "A_PART0.1_18exampleAttachmentId7f9"
                        ],
                        "title": "Attachment Id",
                        "type": "string"
                      },
                      "file_name": {
                        "description": "Desired filename for the downloaded attachment. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "invoice.pdf",
                          "report.docx"
                        ],
                        "title": "File Name",
                        "type": "string"
                      },
                      "message_id": {
                        "description": "Immutable ID of the message containing the attachment. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "18exampleMessageId7f9"
                        ],
                        "title": "Message Id",
                        "type": "string"
                      },
                      "user_id": {
                        "default": "me",
                        "description": "User's email address ('me' for authenticated user). Please provide a value of type string.",
                        "examples": [
                          "me",
                          "user@example.com"
                        ],
                        "title": "User Id",
                        "type": "string"
                      }
                    },
                    "description": "Retrieves a specific attachment by id from a message in a user's gmail mailbox, requiring valid message and attachment ids.",
                    "display_description": "Retrieves a specific attachment by id from a message in a user's gmail mailbox, requiring valid message and attachment ids.",
                    "display_name": "Get Attachment",
                    "name": "gmail_get_attachment",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GMAIL_GET_ATTACHMENT"
                    ]
                  },
                  {
                    "args": {
                      "other_contacts": {
                        "default": false,
                        "description": "If true, retrieves 'Other Contacts' (people interacted with but not explicitly saved), ignoring `resource_name` and enabling pagination/sync. If false, retrieves information for the single person specified by `resource_name`. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Other Contacts",
                        "type": "boolean"
                      },
                      "page_size": {
                        "default": 10,
                        "description": "The number of 'Other Contacts' to return per page. Applicable only when `other_contacts` is true. Please provide a value of type integer.",
                        "examples": [],
                        "title": "Page Size",
                        "type": "integer"
                      },
                      "page_token": {
                        "default": "",
                        "description": "An opaque token from a previous response to retrieve the next page of 'Other Contacts' results. Applicable only when `other_contacts` is true and paginating. Please provide a value of type string.",
                        "examples": [],
                        "title": "Page Token",
                        "type": "string"
                      },
                      "person_fields": {
                        "default": "emailAddresses,names,birthdays,genders",
                        "description": "A comma-separated field mask to restrict which fields on the person (or persons) are returned. Consult the Google People API documentation for a comprehensive list of valid fields. Please provide a value of type string.",
                        "examples": [
                          "names,emailAddresses",
                          "emailAddresses,names,birthdays,genders",
                          "addresses,phoneNumbers,metadata"
                        ],
                        "title": "Person Fields",
                        "type": "string"
                      },
                      "resource_name": {
                        "default": "people/me",
                        "description": "Resource name identifying the person for whom to retrieve information (like the authenticated user or a specific contact). Used only when `other_contacts` is false. Please provide a value of type string.",
                        "examples": [
                          "people/me",
                          "people/c12345678901234567890",
                          "people/102345678901234567890"
                        ],
                        "title": "Resource Name",
                        "type": "string"
                      },
                      "sync_token": {
                        "default": "",
                        "description": "A token from a previous 'Other Contacts' list call to retrieve only changes since the last sync; leave empty for an initial full sync. Applicable only when `other_contacts` is true. Please provide a value of type string.",
                        "examples": [],
                        "title": "Sync Token",
                        "type": "string"
                      }
                    },
                    "description": "Retrieves either a specific person's details (using `resource name`) or lists 'other contacts' (if `other contacts` is true), with `person fields` specifying the data to return.",
                    "display_description": "Retrieves either a specific person's details (using `resource name`) or lists 'other contacts' (if `other contacts` is true), with `person fields` specifying the data to return.",
                    "display_name": "Get Contacts",
                    "name": "gmail_get_people",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GMAIL_GET_PEOPLE"
                    ]
                  },
                  {
                    "args": {
                      "user_id": {
                        "default": "me",
                        "description": "The email address of the Gmail user whose profile is to be retrieved, or the special value 'me' to indicate the currently authenticated user. Please provide a value of type string.",
                        "examples": [
                          "user@example.com",
                          "me"
                        ],
                        "title": "User Id",
                        "type": "string"
                      }
                    },
                    "description": "Retrieves key gmail profile information (email address, message/thread totals, history id) for a user.",
                    "display_description": "Retrieves key gmail profile information (email address, message/thread totals, history id) for a user.",
                    "display_name": "Get User Profile",
                    "name": "gmail_get_profile",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GMAIL_GET_PROFILE"
                    ]
                  },
                  {
                    "args": {
                      "user_id": {
                        "default": "me",
                        "description": "Identifies the Gmail account (owner's email or 'me' for authenticated user) for which labels will be listed. Please provide a value of type string.",
                        "examples": [
                          "me",
                          "user@example.com"
                        ],
                        "title": "User Id",
                        "type": "string"
                      }
                    },
                    "description": "Retrieves a list of all system and user-created labels for the specified gmail account.",
                    "display_description": "Retrieves a list of all system and user-created labels for the specified gmail account.",
                    "display_name": "List Email Labels",
                    "name": "gmail_list_labels",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GMAIL_LIST_LABELS"
                    ]
                  },
                  {
                    "args": {
                      "max_results": {
                        "default": 10,
                        "description": "Maximum number of threads to return. Please provide a value of type integer.",
                        "examples": [
                          "10",
                          "50",
                          "100"
                        ],
                        "title": "Max Results",
                        "type": "integer"
                      },
                      "page_token": {
                        "default": "",
                        "description": "Token from a previous response to retrieve a specific page of results; omit for the first page. Please provide a value of type string.",
                        "examples": [
                          "abcPageToken123"
                        ],
                        "title": "Page Token",
                        "type": "string"
                      },
                      "query": {
                        "default": "",
                        "description": "Filter for threads, using Gmail search query syntax (e.g., 'from:user@example.com is:unread'). Please provide a value of type string.",
                        "examples": [
                          "is:unread",
                          "from:john.doe@example.com",
                          "subject:important"
                        ],
                        "title": "Query",
                        "type": "string"
                      },
                      "user_id": {
                        "default": "me",
                        "description": "The user's email address or 'me' to specify the authenticated Gmail account. Please provide a value of type string.",
                        "examples": [
                          "me",
                          "user@example.com"
                        ],
                        "title": "User Id",
                        "type": "string"
                      },
                      "verbose": {
                        "default": false,
                        "description": "If false, returns threads with basic fields (id, snippet, historyId). If true, returns threads with complete message details including headers, body, attachments, and metadata for each message in the thread. Please provide a value of type boolean.",
                        "examples": [
                          "True",
                          "False"
                        ],
                        "title": "Verbose",
                        "type": "boolean"
                      }
                    },
                    "description": "Retrieves a list of email threads from a gmail account, identified by `user id` (email address or 'me'), supporting filtering and pagination.",
                    "display_description": "Retrieves a list of email threads from a gmail account, identified by `user id` (email address or 'me'), supporting filtering and pagination.",
                    "display_name": "List Email Threads",
                    "name": "gmail_list_threads",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GMAIL_LIST_THREADS"
                    ]
                  },
                  {
                    "args": {
                      "label_id": {
                        "description": "ID of the user-created label to be permanently deleted; must exist and not be a system label. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "Label_123",
                          "Label_xyz789"
                        ],
                        "title": "Label Id",
                        "type": "string"
                      },
                      "user_id": {
                        "default": "me",
                        "description": "User's email address or 'me' for the authenticated user. Please provide a value of type string.",
                        "examples": [
                          "me",
                          "user@example.com"
                        ],
                        "title": "User Id",
                        "type": "string"
                      }
                    },
                    "description": "Permanently deletes a specific, existing user-created gmail label by its id for a user; cannot delete system labels.",
                    "display_description": "Permanently deletes a specific, existing user-created gmail label by its id for a user; cannot delete system labels.",
                    "display_name": "Delete Email Label",
                    "name": "gmail_remove_label",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GMAIL_REMOVE_LABEL"
                    ]
                  },
                  {
                    "args": {
                      "attachment": {
                        "default": null,
                        "description": "File to attach to the reply. Just Provide file path here",
                        "examples": [],
                        "title": "Attachment",
                        "type": "string"
                      },
                      "bcc": {
                        "default": [],
                        "description": "BCC recipients' email addresses (hidden from other recipients).",
                        "examples": [
                          [
                            "bcc.recipient@example.com"
                          ]
                        ],
                        "items": {
                          "type": "string"
                        },
                        "title": "Bcc",
                        "type": "array"
                      },
                      "cc": {
                        "default": [],
                        "description": "CC recipients' email addresses.",
                        "examples": [
                          [
                            "cc.recipient1@example.com",
                            "cc.recipient2@example.com"
                          ]
                        ],
                        "items": {
                          "type": "string"
                        },
                        "title": "Cc",
                        "type": "array"
                      },
                      "extra_recipients": {
                        "default": [],
                        "description": "Additional 'To' recipients' email addresses.",
                        "examples": [
                          [
                            "jane.doe@example.com",
                            "another.person@example.com"
                          ]
                        ],
                        "items": {
                          "type": "string"
                        },
                        "title": "Extra Recipients",
                        "type": "array"
                      },
                      "is_html": {
                        "default": false,
                        "description": "Indicates if `message_body` is HTML; if True, body must be valid HTML, if False, body should not contain HTML tags. Please provide a value of type boolean.",
                        "examples": [
                          "True",
                          "False"
                        ],
                        "title": "Is Html",
                        "type": "boolean"
                      },
                      "message_body": {
                        "description": "Content of the reply message, either plain text or HTML. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "Dear Sir, Nice talking to you. Yours respectfully, John"
                        ],
                        "title": "Message Body",
                        "type": "string"
                      },
                      "recipient_email": {
                        "description": "Primary recipient's email address. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "john@doe.com"
                        ],
                        "title": "Recipient Email",
                        "type": "string"
                      },
                      "thread_id": {
                        "description": "Identifier of the Gmail thread for the reply. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "x53r3vdevff"
                        ],
                        "title": "Thread Id",
                        "type": "string"
                      },
                      "user_id": {
                        "default": "me",
                        "description": "Identifier for the user sending the reply; 'me' refers to the authenticated user. Please provide a value of type string.",
                        "examples": [
                          "me",
                          "user@example.com"
                        ],
                        "title": "User Id",
                        "type": "string"
                      }
                    },
                    "description": "Sends a reply within a specific gmail thread using the original thread's subject, requiring a valid `thread id` and correctly formatted email addresses. supports attachments via the `attachment` parameter with valid `s3key`, `mimetype`, and `name`.",
                    "display_description": "Sends a reply within a specific gmail thread using the original thread's subject, requiring a valid `thread id` and correctly formatted email addresses. supports attachments via the `attachment` parameter with valid `s3key`, `mimetype`, and `name`.",
                    "display_name": "Reply To Thread",
                    "name": "gmail_reply_to_thread",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GMAIL_REPLY_TO_THREAD"
                    ]
                  },
                  {
                    "args": {
                      "attachment": {
                        "default": null,
                        "description": "File to attach; ensure `s3key`, `mimetype`, and `name` are set if provided. Omit or set to null for no attachment.",
                        "examples": [],
                        "title": "Attachment",
                        "type": "string"
                      },
                      "bcc": {
                        "default": [],
                        "description": "Blind Carbon Copy (BCC) recipients' email addresses.",
                        "examples": [
                          [
                            "auditor@example.com"
                          ]
                        ],
                        "items": {
                          "type": "string"
                        },
                        "title": "Bcc",
                        "type": "array"
                      },
                      "body": {
                        "description": "Email content (plain text or HTML); if HTML, `is_html` must be `True`. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "Hello team, let's discuss the project updates tomorrow.",
                          "<h1>Welcome!</h1><p>Thank you for signing up.</p>"
                        ],
                        "title": "Body",
                        "type": "string"
                      },
                      "cc": {
                        "default": [],
                        "description": "Carbon Copy (CC) recipients' email addresses.",
                        "examples": [
                          [
                            "manager@example.com",
                            "teamlead@example.com"
                          ]
                        ],
                        "items": {
                          "type": "string"
                        },
                        "title": "Cc",
                        "type": "array"
                      },
                      "extra_recipients": {
                        "default": [],
                        "description": "Additional 'To' recipients' email addresses (not Cc or Bcc).",
                        "examples": [
                          [
                            "jane.doe@example.com",
                            "support@example.com"
                          ]
                        ],
                        "items": {
                          "type": "string"
                        },
                        "title": "Extra Recipients",
                        "type": "array"
                      },
                      "is_html": {
                        "default": false,
                        "description": "Set to `True` if the email body contains HTML tags. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Is Html",
                        "type": "boolean"
                      },
                      "recipient_email": {
                        "description": "Primary recipient's email address. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "john@doe.com"
                        ],
                        "title": "Recipient Email",
                        "type": "string"
                      },
                      "subject": {
                        "default": null,
                        "description": "Subject line of the email. Please provide a value of type string.",
                        "examples": [
                          "Project Update Meeting",
                          "Your Weekly Newsletter"
                        ],
                        "title": "Subject",
                        "type": "string"
                      },
                      "user_id": {
                        "default": "me",
                        "description": "User's email address; the literal 'me' refers to the authenticated user. Please provide a value of type string.",
                        "examples": [
                          "user@example.com",
                          "me"
                        ],
                        "title": "User Id",
                        "type": "string"
                      }
                    },
                    "description": "Sends an email via gmail api using the authenticated user's google profile display name, requiring `is html=true` if the body contains html and valid `s3key`, `mimetype`, `name` for any attachment.",
                    "display_description": "Sends an email via gmail api using the authenticated user's google profile display name, requiring `is html=true` if the body contains html and valid `s3key`, `mimetype`, `name` for any attachment.",
                    "display_name": "Send Email",
                    "name": "gmail_send_email",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GMAIL_SEND_EMAIL"
                    ]
                  }
                ]
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "GmailAPI"
        },
        "dragging": false,
        "id": "GmailAPI-TemEl",
        "measured": {
          "height": 312,
          "width": 320
        },
        "position": {
          "x": -121.81927361905153,
          "y": 259.4455213648232
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ComposioGoogleCalendarAPIComponent-UxH4R",
          "node": {
            "base_classes": [
              "DataFrame"
            ],
            "beta": false,
            "category": "composio",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Google Calendar API",
            "display_name": "Google Calendar",
            "documentation": "https://docs.composio.dev",
            "edited": false,
            "field_order": [
              "entity_id",
              "api_key",
              "auth_link",
              "action",
              "GOOGLECALENDAR_LIST_CALENDARS_max_results",
              "GOOGLECALENDAR_LIST_CALENDARS_min_access_role",
              "GOOGLECALENDAR_LIST_CALENDARS_page_token",
              "GOOGLECALENDAR_LIST_CALENDARS_show_deleted",
              "GOOGLECALENDAR_LIST_CALENDARS_show_hidden",
              "GOOGLECALENDAR_LIST_CALENDARS_sync_token",
              "GOOGLECALENDAR_FIND_EVENT_calendar_id",
              "GOOGLECALENDAR_FIND_EVENT_query",
              "GOOGLECALENDAR_FIND_EVENT_max_results",
              "GOOGLECALENDAR_FIND_EVENT_order_by",
              "GOOGLECALENDAR_FIND_EVENT_show_deleted",
              "GOOGLECALENDAR_FIND_EVENT_single_events",
              "GOOGLECALENDAR_FIND_EVENT_timeMax",
              "GOOGLECALENDAR_FIND_EVENT_timeMin",
              "GOOGLECALENDAR_FIND_EVENT_updated_min",
              "GOOGLECALENDAR_FIND_EVENT_event_types",
              "GOOGLECALENDAR_FIND_EVENT_page_token",
              "GOOGLECALENDAR_DUPLICATE_CALENDAR_summary",
              "GOOGLECALENDAR_REMOVE_ATTENDEE_calendar_id",
              "GOOGLECALENDAR_REMOVE_ATTENDEE_event_id",
              "GOOGLECALENDAR_REMOVE_ATTENDEE_attendee_email",
              "GOOGLECALENDAR_GET_CALENDAR_calendar_id",
              "GOOGLECALENDAR_CREATE_EVENT_description",
              "GOOGLECALENDAR_CREATE_EVENT_eventType",
              "GOOGLECALENDAR_CREATE_EVENT_create_meeting_room",
              "GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests",
              "GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers",
              "GOOGLECALENDAR_CREATE_EVENT_location",
              "GOOGLECALENDAR_CREATE_EVENT_summary",
              "GOOGLECALENDAR_CREATE_EVENT_transparency",
              "GOOGLECALENDAR_CREATE_EVENT_visibility",
              "GOOGLECALENDAR_CREATE_EVENT_timezone",
              "GOOGLECALENDAR_CREATE_EVENT_recurrence",
              "GOOGLECALENDAR_CREATE_EVENT_guests_can_modify",
              "GOOGLECALENDAR_CREATE_EVENT_attendees",
              "GOOGLECALENDAR_CREATE_EVENT_send_updates",
              "GOOGLECALENDAR_CREATE_EVENT_start_datetime",
              "GOOGLECALENDAR_CREATE_EVENT_event_duration_hour",
              "GOOGLECALENDAR_CREATE_EVENT_event_duration_minutes",
              "GOOGLECALENDAR_CREATE_EVENT_calendar_id",
              "GOOGLECALENDAR_DELETE_EVENT_calendar_id",
              "GOOGLECALENDAR_DELETE_EVENT_event_id",
              "GOOGLECALENDAR_FIND_FREE_SLOTS_time_min",
              "GOOGLECALENDAR_FIND_FREE_SLOTS_time_max",
              "GOOGLECALENDAR_FIND_FREE_SLOTS_timezone",
              "GOOGLECALENDAR_FIND_FREE_SLOTS_group_expansion_max",
              "GOOGLECALENDAR_FIND_FREE_SLOTS_calendar_expansion_max",
              "GOOGLECALENDAR_FIND_FREE_SLOTS_items",
              "GOOGLECALENDAR_QUICK_ADD_calendar_id",
              "GOOGLECALENDAR_QUICK_ADD_text",
              "GOOGLECALENDAR_QUICK_ADD_send_updates",
              "GOOGLECALENDAR_PATCH_CALENDAR_calendar_id",
              "GOOGLECALENDAR_PATCH_CALENDAR_description",
              "GOOGLECALENDAR_PATCH_CALENDAR_location",
              "GOOGLECALENDAR_PATCH_CALENDAR_summary",
              "GOOGLECALENDAR_PATCH_CALENDAR_timezone",
              "GOOGLECALENDAR_GET_CURRENT_DATE_TIME_timezone",
              "GOOGLECALENDAR_UPDATE_EVENT_description",
              "GOOGLECALENDAR_UPDATE_EVENT_eventType",
              "GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room",
              "GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests",
              "GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers",
              "GOOGLECALENDAR_UPDATE_EVENT_location",
              "GOOGLECALENDAR_UPDATE_EVENT_summary",
              "GOOGLECALENDAR_UPDATE_EVENT_transparency",
              "GOOGLECALENDAR_UPDATE_EVENT_visibility",
              "GOOGLECALENDAR_UPDATE_EVENT_timezone",
              "GOOGLECALENDAR_UPDATE_EVENT_recurrence",
              "GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify",
              "GOOGLECALENDAR_UPDATE_EVENT_attendees",
              "GOOGLECALENDAR_UPDATE_EVENT_send_updates",
              "GOOGLECALENDAR_UPDATE_EVENT_start_datetime",
              "GOOGLECALENDAR_UPDATE_EVENT_event_duration_hour",
              "GOOGLECALENDAR_UPDATE_EVENT_event_duration_minutes",
              "GOOGLECALENDAR_UPDATE_EVENT_calendar_id",
              "GOOGLECALENDAR_UPDATE_EVENT_event_id"
            ],
            "frozen": false,
            "icon": "Googlecalendar",
            "key": "ComposioGoogleCalendarAPIComponent",
            "last_updated": "2025-09-18T13:07:36.275Z",
            "legacy": false,
            "lf_version": "1.5.1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "group_outputs": false,
                "hidden": null,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.12257571662796125,
            "template": {
              "GOOGLECALENDAR_CREATE_EVENT_attendees": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Attendees",
                "dynamic": false,
                "info": "List of attendee emails (strings).",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_attendees",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "The ID of the Google Calendar. `primary` for interacting with the primary calendar.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_calendar_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "primary"
              },
              "GOOGLECALENDAR_CREATE_EVENT_create_meeting_room": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Create Meeting Room",
                "dynamic": false,
                "info": "If true, a Google Meet link is created and added to the event.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_CREATE_EVENT_create_meeting_room",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_CREATE_EVENT_description": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Description",
                "dynamic": false,
                "info": "Description of the event. Can contain HTML. Optional.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_description",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_eventType": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Event Type",
                "dynamic": false,
                "info": "Type of the event, immutable post-creation. Currently, only 'default'",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_eventType",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "default"
              },
              "GOOGLECALENDAR_CREATE_EVENT_event_duration_hour": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Event Duration Hour",
                "dynamic": false,
                "info": "Number of hours (0-24).",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_CREATE_EVENT_event_duration_hour",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 0
              },
              "GOOGLECALENDAR_CREATE_EVENT_event_duration_minutes": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Event Duration Minutes",
                "dynamic": false,
                "info": "Number of minutes (0-59).",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_CREATE_EVENT_event_duration_minutes",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 30
              },
              "GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Guests Can Invite Others",
                "dynamic": false,
                "info": "Whether attendees other than the organizer can invite others to the event.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Guests Can See Other Guests",
                "dynamic": false,
                "info": "Whether attendees other than the organizer can see who the event's attendees are.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_CREATE_EVENT_guests_can_modify": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Guests Can Modify",
                "dynamic": false,
                "info": "If True, guests can modify the event.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_CREATE_EVENT_guests_can_modify",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_CREATE_EVENT_location": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Location",
                "dynamic": false,
                "info": "Geographic location of the event as free-form text.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_location",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_recurrence": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Recurrence",
                "dynamic": false,
                "info": "List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_recurrence",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_send_updates": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Send Updates",
                "dynamic": false,
                "info": "Defaults to True. Whether to send updates to the attendees.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_CREATE_EVENT_send_updates",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_CREATE_EVENT_start_datetime": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Start Datetime",
                "dynamic": false,
                "info": "Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_start_datetime",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_summary": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Summary/Title",
                "dynamic": false,
                "info": "Summary (title) of the event.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_summary",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_timezone": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Timezone",
                "dynamic": false,
                "info": "IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_timezone",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_CREATE_EVENT_transparency": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Event Transparency",
                "dynamic": false,
                "info": "'opaque' (busy) or 'transparent' (available).",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_transparency",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "opaque"
              },
              "GOOGLECALENDAR_CREATE_EVENT_visibility": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Event Visibility",
                "dynamic": false,
                "info": "Event visibility: 'default', 'public', 'private', or 'confidential'.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_CREATE_EVENT_visibility",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "default"
              },
              "GOOGLECALENDAR_DELETE_EVENT_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "ID of the Google Calendar",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_DELETE_EVENT_calendar_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "primary"
              },
              "GOOGLECALENDAR_DELETE_EVENT_event_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Event Id",
                "dynamic": false,
                "info": "ID of the event to be deleted",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_DELETE_EVENT_event_id",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_DUPLICATE_CALENDAR_summary": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Summary/Title",
                "dynamic": false,
                "info": "Title of the calendar to be duplicated.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_DUPLICATE_CALENDAR_summary",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "Identifier of the Google Calendar. Use 'primary' for the currently logged in user's primary calendar.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_calendar_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "primary"
              },
              "GOOGLECALENDAR_FIND_EVENT_event_types": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Event Types",
                "dynamic": false,
                "info": "List of event types to return. Possible values are: default, outOfOffice, focusTime, workingLocation.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_event_types",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_max_results": {
                "_input_type": "IntInput",
                "advanced": false,
                "display_name": "Max Results",
                "dynamic": false,
                "info": "Maximum number of events returned on one result page. The page size can never be larger than 2500 events. The default value is 10.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_FIND_EVENT_max_results",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 10
              },
              "GOOGLECALENDAR_FIND_EVENT_order_by": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Order By",
                "dynamic": false,
                "info": "The order of the events returned in the result. Acceptable values are 'startTime' and 'updated'.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_order_by",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_page_token": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Page Token",
                "dynamic": false,
                "info": "Token specifying which result page to return. Optional.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_page_token",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_query": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Query",
                "dynamic": false,
                "info": "Search term to find events that match these terms in the event's summary, description, location, attendee's displayName, attendee's email, organizer's displayName, organizer's email, etc if needed.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_query",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_show_deleted": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Show Deleted",
                "dynamic": false,
                "info": "Whether to include deleted events (with status equals 'cancelled') in the result.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_FIND_EVENT_show_deleted",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_FIND_EVENT_single_events": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Single Events",
                "dynamic": false,
                "info": "Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_FIND_EVENT_single_events",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "GOOGLECALENDAR_FIND_EVENT_timeMax": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Timemax",
                "dynamic": false,
                "info": "Upper bound (exclusive) for an event's start time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_timeMax",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_timeMin": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Timemin",
                "dynamic": false,
                "info": "Lower bound (exclusive) for an event's end time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_timeMin",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_EVENT_updated_min": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Updated Min",
                "dynamic": false,
                "info": "Lower bound for an event's last modification time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_EVENT_updated_min",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_FREE_SLOTS_calendar_expansion_max": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Calendar Expansion Max",
                "dynamic": false,
                "info": "Maximal number of calendars for which FreeBusy information is to be provided. Optional. Maximum value is 50.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_calendar_expansion_max",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 50
              },
              "GOOGLECALENDAR_FIND_FREE_SLOTS_group_expansion_max": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Group Expansion Max",
                "dynamic": false,
                "info": "Maximal number of calendar identifiers to be provided for a single group. Optional. An error is returned for a group with more members than this value. Maximum value is 100.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_group_expansion_max",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 100
              },
              "GOOGLECALENDAR_FIND_FREE_SLOTS_items": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Items",
                "dynamic": false,
                "info": "List of calendars ids for which to fetch",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_items",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_FREE_SLOTS_time_max": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Time Max",
                "dynamic": false,
                "info": "The end datetime of the interval for the query. Supports multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_time_max",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_FREE_SLOTS_time_min": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Time Min",
                "dynamic": false,
                "info": "The start datetime of the interval for the query. Supports multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_time_min",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_FIND_FREE_SLOTS_timezone": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Timezone",
                "dynamic": false,
                "info": "Time zone used in the response. Optional. The default is UTC.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_FIND_FREE_SLOTS_timezone",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "UTC"
              },
              "GOOGLECALENDAR_GET_CALENDAR_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "The ID of the Google Calendar that needs to be fetched. Default is 'primary'.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_GET_CALENDAR_calendar_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "primary"
              },
              "GOOGLECALENDAR_GET_CURRENT_DATE_TIME_timezone": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Timezone",
                "dynamic": false,
                "info": "The timezone offset from UTC to retrieve current date and time, like for location of UTC+6, you give 6, for UTC -9, your give -9.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_GET_CURRENT_DATE_TIME_timezone",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 0
              },
              "GOOGLECALENDAR_LIST_CALENDARS_max_results": {
                "_input_type": "IntInput",
                "advanced": false,
                "display_name": "Max Results",
                "dynamic": false,
                "info": "Maximum number of entries returned on one result page. The page size can never be larger than 250 entries.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_LIST_CALENDARS_max_results",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 10
              },
              "GOOGLECALENDAR_LIST_CALENDARS_min_access_role": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Min Access Role",
                "dynamic": false,
                "info": "The minimum access role for the user in the returned entries. Accepted values are 'owner' & 'reader'",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_LIST_CALENDARS_min_access_role",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_LIST_CALENDARS_page_token": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Page Token",
                "dynamic": false,
                "info": "Token specifying which result page to return.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_LIST_CALENDARS_page_token",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_LIST_CALENDARS_show_deleted": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Show Deleted",
                "dynamic": false,
                "info": "Whether to include deleted calendar list entries in the result.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_LIST_CALENDARS_show_deleted",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_LIST_CALENDARS_show_hidden": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Show Hidden",
                "dynamic": false,
                "info": "Whether to show hidden entries.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_LIST_CALENDARS_show_hidden",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_LIST_CALENDARS_sync_token": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sync Token",
                "dynamic": false,
                "info": "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_LIST_CALENDARS_sync_token",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_PATCH_CALENDAR_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "The ID of the Google Calendar that needs to be updated.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_PATCH_CALENDAR_calendar_id",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_PATCH_CALENDAR_description": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Description",
                "dynamic": false,
                "info": "Description of the calendar. Optional.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_PATCH_CALENDAR_description",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_PATCH_CALENDAR_location": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Location",
                "dynamic": false,
                "info": "Geographic location of the calendar as free-form text.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_PATCH_CALENDAR_location",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_PATCH_CALENDAR_summary": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Title/Summary",
                "dynamic": false,
                "info": "Title of the calendar. This field is required and cannot be left blank as per the Google Calendar API requirements.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_PATCH_CALENDAR_summary",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_PATCH_CALENDAR_timezone": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Timezone",
                "dynamic": false,
                "info": "The time zone of the calendar. (Formatted as an IANA Time Zone Database name, e.g. 'Europe/Zurich').",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_PATCH_CALENDAR_timezone",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_QUICK_ADD_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "Calendar identifier. To list calendars to retrieve calendar IDs use relevant tools. To access the primary calendar of the currently logged in user, use the 'primary' keyword.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_QUICK_ADD_calendar_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "primary"
              },
              "GOOGLECALENDAR_QUICK_ADD_send_updates": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Send Updates",
                "dynamic": false,
                "info": "Guests who should receive notifications about the creation of the new event. Accepted fields include 'all', 'none', 'externalOnly'",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_QUICK_ADD_send_updates",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "none"
              },
              "GOOGLECALENDAR_QUICK_ADD_text": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "The text describing the event to be created.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_QUICK_ADD_text",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_REMOVE_ATTENDEE_attendee_email": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Attendee Email",
                "dynamic": false,
                "info": "Email address of the attendee to be removed",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_REMOVE_ATTENDEE_attendee_email",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_REMOVE_ATTENDEE_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "ID of the Google Calendar",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_REMOVE_ATTENDEE_calendar_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "primary"
              },
              "GOOGLECALENDAR_REMOVE_ATTENDEE_event_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Event Id",
                "dynamic": false,
                "info": "ID of the event",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_REMOVE_ATTENDEE_event_id",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_attendees": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Attendees",
                "dynamic": false,
                "info": "List of attendee emails (strings).",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_attendees",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_calendar_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Calendar Id",
                "dynamic": false,
                "info": "ID of the Google Calendar",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_calendar_id",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "primary"
              },
              "GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Create Meeting Room",
                "dynamic": false,
                "info": "If true, a Google Meet link is created and added to the event.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_UPDATE_EVENT_description": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Description",
                "dynamic": false,
                "info": "Description of the event. Can contain HTML. Optional.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_description",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_eventType": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "EventType",
                "dynamic": false,
                "info": "Type of the event, immutable post-creation. Currently, only 'default' and 'workingLocation' can be created.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_eventType",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "default"
              },
              "GOOGLECALENDAR_UPDATE_EVENT_event_duration_hour": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Event Duration Hour",
                "dynamic": false,
                "info": "Number of hours (0-24).",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_UPDATE_EVENT_event_duration_hour",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 0
              },
              "GOOGLECALENDAR_UPDATE_EVENT_event_duration_minutes": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Event Duration Minutes",
                "dynamic": false,
                "info": "Number of minutes (0-59).",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_UPDATE_EVENT_event_duration_minutes",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 30
              },
              "GOOGLECALENDAR_UPDATE_EVENT_event_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Event Id",
                "dynamic": false,
                "info": "ID of the event to be updated",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_event_id",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Guests Can Invite Others",
                "dynamic": false,
                "info": "Whether attendees other than the organizer can invite others to the event.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Guests Can See Other Guests",
                "dynamic": false,
                "info": "Whether attendees other than the organizer can see who the event's attendees are.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Guests Can Modify",
                "dynamic": false,
                "info": "If True, guests can modify the event.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_UPDATE_EVENT_location": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Location",
                "dynamic": false,
                "info": "Geographic location of the event as free-form text.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_location",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_recurrence": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Recurrence",
                "dynamic": false,
                "info": "List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_recurrence",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_send_updates": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Send Updates",
                "dynamic": false,
                "info": "Defaults to True. Whether to send updates to the attendees.",
                "list": false,
                "list_add_label": "Add More",
                "name": "GOOGLECALENDAR_UPDATE_EVENT_send_updates",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "GOOGLECALENDAR_UPDATE_EVENT_start_datetime": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Start Datetime",
                "dynamic": false,
                "info": "Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_start_datetime",
                "placeholder": "",
                "required": true,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_summary": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Summary/Title",
                "dynamic": false,
                "info": "Summary (title) of the event.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_summary",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_timezone": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Timezone",
                "dynamic": false,
                "info": "IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_timezone",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "GOOGLECALENDAR_UPDATE_EVENT_transparency": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Event Transparency",
                "dynamic": false,
                "info": "'opaque' (busy) or 'transparent' (available).",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_transparency",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "opaque"
              },
              "GOOGLECALENDAR_UPDATE_EVENT_visibility": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Event Visibility",
                "dynamic": false,
                "info": "Event visibility: 'default', 'public', 'private', or 'confidential'.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "GOOGLECALENDAR_UPDATE_EVENT_visibility",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "default"
              },
              "_type": "Component",
              "action": {
                "_input_type": "SortableListInput",
                "advanced": false,
                "display_name": "Action",
                "dynamic": false,
                "helper_text": null,
                "helper_text_metadata": {},
                "info": "",
                "limit": 1,
                "name": "action",
                "options": [
                  {
                    "metadata": "GOOGLECALENDAR_UPDATE_EVENT",
                    "name": "Update Google Event"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_REMOVE_ATTENDEE",
                    "name": "Remove Attendee From Event"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_GET_CURRENT_DATE_TIME",
                    "name": "Get Current Date And Time"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_QUICK_ADD",
                    "name": "Quick Add Event"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_LIST_CALENDARS",
                    "name": "List Google Calendars"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_FIND_EVENT",
                    "name": "Find Event"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_CREATE_EVENT",
                    "name": "Create Event"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_FIND_FREE_SLOTS",
                    "name": "Find Free Slots"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_PATCH_CALENDAR",
                    "name": "Patch Calendar"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_GET_CALENDAR",
                    "name": "Fetch Google Calendar"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_DELETE_EVENT",
                    "name": "Delete Event"
                  },
                  {
                    "metadata": "GOOGLECALENDAR_DUPLICATE_CALENDAR",
                    "name": "Duplicate Calendar"
                  }
                ],
                "placeholder": "Select action",
                "real_time_refresh": true,
                "required": false,
                "search_category": [],
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "sortableList",
                "value": "disabled"
              },
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "Composio API Key",
                "dynamic": false,
                "info": "",
                "input_types": [],
                "load_from_db": false,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "real_time_refresh": true,
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "auth_link": {
                "_input_type": "AuthInput",
                "advanced": false,
                "auth_tooltip": "Disconnect",
                "dynamic": false,
                "info": "",
                "name": "auth_link",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "auth",
                "value": "validated"
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Any\n\nfrom composio import Action\n\nfrom langflow.base.composio.composio_base import ComposioBaseComponent\nfrom langflow.inputs import (\n    BoolInput,\n    IntInput,\n    MessageTextInput,\n)\nfrom langflow.logging import logger\n\n\nclass ComposioGoogleCalendarAPIComponent(ComposioBaseComponent):\n    \"\"\"Google Calendar API component for interacting with Google Calendar services.\"\"\"\n\n    display_name: str = \"Google Calendar\"\n    description: str = \"Google Calendar API\"\n    icon = \"Googlecalendar\"\n    documentation: str = \"https://docs.composio.dev\"\n    app_name = \"googlecalendar\"\n\n    _actions_data: dict = {\n        \"GOOGLECALENDAR_UPDATE_EVENT\": {\n            \"display_name\": \"Update Google Event\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_UPDATE_EVENT_description\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_eventType\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_location\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_summary\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_transparency\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_visibility\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_timezone\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_recurrence\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_attendees\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_send_updates\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_start_datetime\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_event_duration_hour\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_event_duration_minutes\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_calendar_id\",\n                \"GOOGLECALENDAR_UPDATE_EVENT_event_id\",\n            ],\n        },\n        \"GOOGLECALENDAR_REMOVE_ATTENDEE\": {\n            \"display_name\": \"Remove Attendee From Event\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_REMOVE_ATTENDEE_calendar_id\",\n                \"GOOGLECALENDAR_REMOVE_ATTENDEE_event_id\",\n                \"GOOGLECALENDAR_REMOVE_ATTENDEE_attendee_email\",\n            ],\n        },\n        \"GOOGLECALENDAR_GET_CURRENT_DATE_TIME\": {\n            \"display_name\": \"Get Current Date And Time\",\n            \"action_fields\": [\"GOOGLECALENDAR_GET_CURRENT_DATE_TIME_timezone\"],\n        },\n        \"GOOGLECALENDAR_QUICK_ADD\": {\n            \"display_name\": \"Quick Add Event\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_QUICK_ADD_calendar_id\",\n                \"GOOGLECALENDAR_QUICK_ADD_text\",\n                \"GOOGLECALENDAR_QUICK_ADD_send_updates\",\n            ],\n        },\n        \"GOOGLECALENDAR_LIST_CALENDARS\": {\n            \"display_name\": \"List Google Calendars\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_LIST_CALENDARS_max_results\",\n                \"GOOGLECALENDAR_LIST_CALENDARS_min_access_role\",\n                \"GOOGLECALENDAR_LIST_CALENDARS_page_token\",\n                \"GOOGLECALENDAR_LIST_CALENDARS_show_deleted\",\n                \"GOOGLECALENDAR_LIST_CALENDARS_show_hidden\",\n                \"GOOGLECALENDAR_LIST_CALENDARS_sync_token\",\n            ],\n        },\n        \"GOOGLECALENDAR_FIND_EVENT\": {\n            \"display_name\": \"Find Event\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_FIND_EVENT_calendar_id\",\n                \"GOOGLECALENDAR_FIND_EVENT_query\",\n                \"GOOGLECALENDAR_FIND_EVENT_max_results\",\n                \"GOOGLECALENDAR_FIND_EVENT_order_by\",\n                \"GOOGLECALENDAR_FIND_EVENT_show_deleted\",\n                \"GOOGLECALENDAR_FIND_EVENT_single_events\",\n                \"GOOGLECALENDAR_FIND_EVENT_timeMax\",\n                \"GOOGLECALENDAR_FIND_EVENT_timeMin\",\n                \"GOOGLECALENDAR_FIND_EVENT_updated_min\",\n                \"GOOGLECALENDAR_FIND_EVENT_event_types\",\n                \"GOOGLECALENDAR_FIND_EVENT_page_token\",\n            ],\n        },\n        \"GOOGLECALENDAR_CREATE_EVENT\": {\n            \"display_name\": \"Create Event\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_CREATE_EVENT_description\",\n                \"GOOGLECALENDAR_CREATE_EVENT_eventType\",\n                \"GOOGLECALENDAR_CREATE_EVENT_create_meeting_room\",\n                \"GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests\",\n                \"GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers\",\n                \"GOOGLECALENDAR_CREATE_EVENT_location\",\n                \"GOOGLECALENDAR_CREATE_EVENT_summary\",\n                \"GOOGLECALENDAR_CREATE_EVENT_transparency\",\n                \"GOOGLECALENDAR_CREATE_EVENT_visibility\",\n                \"GOOGLECALENDAR_CREATE_EVENT_timezone\",\n                \"GOOGLECALENDAR_CREATE_EVENT_recurrence\",\n                \"GOOGLECALENDAR_CREATE_EVENT_guests_can_modify\",\n                \"GOOGLECALENDAR_CREATE_EVENT_attendees\",\n                \"GOOGLECALENDAR_CREATE_EVENT_send_updates\",\n                \"GOOGLECALENDAR_CREATE_EVENT_start_datetime\",\n                \"GOOGLECALENDAR_CREATE_EVENT_event_duration_hour\",\n                \"GOOGLECALENDAR_CREATE_EVENT_event_duration_minutes\",\n                \"GOOGLECALENDAR_CREATE_EVENT_calendar_id\",\n            ],\n        },\n        \"GOOGLECALENDAR_FIND_FREE_SLOTS\": {\n            \"display_name\": \"Find Free Slots\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_time_min\",\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_time_max\",\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_timezone\",\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_group_expansion_max\",\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_calendar_expansion_max\",\n                \"GOOGLECALENDAR_FIND_FREE_SLOTS_items\",\n            ],\n        },\n        \"GOOGLECALENDAR_PATCH_CALENDAR\": {\n            \"display_name\": \"Patch Calendar\",\n            \"action_fields\": [\n                \"GOOGLECALENDAR_PATCH_CALENDAR_calendar_id\",\n                \"GOOGLECALENDAR_PATCH_CALENDAR_description\",\n                \"GOOGLECALENDAR_PATCH_CALENDAR_location\",\n                \"GOOGLECALENDAR_PATCH_CALENDAR_summary\",\n                \"GOOGLECALENDAR_PATCH_CALENDAR_timezone\",\n            ],\n        },\n        \"GOOGLECALENDAR_GET_CALENDAR\": {\n            \"display_name\": \"Fetch Google Calendar\",\n            \"action_fields\": [\"GOOGLECALENDAR_GET_CALENDAR_calendar_id\"],\n        },\n        \"GOOGLECALENDAR_DELETE_EVENT\": {\n            \"display_name\": \"Delete Event\",\n            \"action_fields\": [\"GOOGLECALENDAR_DELETE_EVENT_calendar_id\", \"GOOGLECALENDAR_DELETE_EVENT_event_id\"],\n        },\n        \"GOOGLECALENDAR_DUPLICATE_CALENDAR\": {\n            \"display_name\": \"Duplicate Calendar\",\n            \"action_fields\": [\"GOOGLECALENDAR_DUPLICATE_CALENDAR_summary\"],\n        },\n    }\n\n    _list_variables = {\n        \"GOOGLECALENDAR_FIND_EVENT_event_types\",\n        \"GOOGLECALENDAR_CREATE_EVENT_recurrence\",\n        \"GOOGLECALENDAR_CREATE_EVENT_attendees\",\n        \"GOOGLECALENDAR_FIND_FREE_SLOTS_items\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_recurrence\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_attendees\",\n    }\n\n    _all_fields = {field for action_data in _actions_data.values() for field in action_data[\"action_fields\"]}\n    _bool_variables = {\n        \"GOOGLECALENDAR_LIST_CALENDARS_show_deleted\",\n        \"GOOGLECALENDAR_LIST_CALENDARS_show_hidden\",\n        \"GOOGLECALENDAR_FIND_EVENT_show_deleted\",\n        \"GOOGLECALENDAR_FIND_EVENT_single_events\",\n        \"GOOGLECALENDAR_CREATE_EVENT_create_meeting_room\",\n        \"GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests\",\n        \"GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers\",\n        \"GOOGLECALENDAR_CREATE_EVENT_guests_can_modify\",\n        \"GOOGLECALENDAR_CREATE_EVENT_send_updates\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify\",\n        \"GOOGLECALENDAR_UPDATE_EVENT_send_updates\",\n    }\n\n    inputs = [\n        *ComposioBaseComponent._base_inputs,\n        IntInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_max_results\",\n            display_name=\"Max Results\",\n            info=\"Maximum number of entries returned on one result page. The page size can never be larger than 250 entries.\",  # noqa: E501\n            show=False,\n            value=10,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_min_access_role\",\n            display_name=\"Min Access Role\",\n            info=\"The minimum access role for the user in the returned entries. Accepted values are 'owner' & 'reader'\",\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_page_token\",\n            display_name=\"Page Token\",\n            info=\"Token specifying which result page to return.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_show_deleted\",\n            display_name=\"Show Deleted\",\n            info=\"Whether to include deleted calendar list entries in the result.\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_show_hidden\",\n            display_name=\"Show Hidden\",\n            info=\"Whether to show hidden entries.\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_LIST_CALENDARS_sync_token\",\n            display_name=\"Sync Token\",\n            info=\"Token obtained from the nextSyncToken field returned on the last page of results from the previous list request.\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"Identifier of the Google Calendar. Use 'primary' for the currently logged in user's primary calendar.\",  # noqa: E501\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_query\",\n            display_name=\"Query\",\n            info=\"Search term to find events that match these terms in the event's summary, description, location, attendee's displayName, attendee's email, organizer's displayName, organizer's email, etc if needed.\",  # noqa: E501\n            show=False,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_max_results\",\n            display_name=\"Max Results\",\n            info=\"Maximum number of events returned on one result page. The page size can never be larger than 2500 events. The default value is 10.\",  # noqa: E501\n            show=False,\n            value=10,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_order_by\",\n            display_name=\"Order By\",\n            info=\"The order of the events returned in the result. Acceptable values are 'startTime' and 'updated'.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_show_deleted\",\n            display_name=\"Show Deleted\",\n            info=\"Whether to include deleted events (with status equals 'cancelled') in the result.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_single_events\",\n            display_name=\"Single Events\",\n            info=\"Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves.\",  # noqa: E501\n            show=False,\n            value=True,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_timeMax\",\n            display_name=\"Timemax\",\n            info=\"Upper bound (exclusive) for an event's start time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_timeMin\",\n            display_name=\"Timemin\",\n            info=\"Lower bound (exclusive) for an event's end time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_updated_min\",\n            display_name=\"Updated Min\",\n            info=\"Lower bound for an event's last modification time to filter by. Accepts multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_event_types\",\n            display_name=\"Event Types\",\n            info=\"List of event types to return. Possible values are: default, outOfOffice, focusTime, workingLocation.\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_EVENT_page_token\",\n            display_name=\"Page Token\",\n            info=\"Token specifying which result page to return. Optional.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_DUPLICATE_CALENDAR_summary\",\n            display_name=\"Summary/Title\",\n            info=\"Title of the calendar to be duplicated.\",\n            show=False,\n            value=\"\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_REMOVE_ATTENDEE_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"ID of the Google Calendar\",\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_REMOVE_ATTENDEE_event_id\",\n            display_name=\"Event Id\",\n            info=\"ID of the event\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_REMOVE_ATTENDEE_attendee_email\",\n            display_name=\"Attendee Email\",\n            info=\"Email address of the attendee to be removed\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_GET_CALENDAR_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"The ID of the Google Calendar that needs to be fetched. Default is 'primary'.\",\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_description\",\n            display_name=\"Description\",\n            info=\"Description of the event. Can contain HTML. Optional.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_eventType\",\n            display_name=\"Event Type\",\n            info=\"Type of the event, immutable post-creation. Currently, only 'default'\",\n            show=False,\n            value=\"default\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_create_meeting_room\",\n            display_name=\"Create Meeting Room\",\n            info=\"If true, a Google Meet link is created and added to the event.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_guestsCanSeeOtherGuests\",\n            display_name=\"Guests Can See Other Guests\",\n            info=\"Whether attendees other than the organizer can see who the event's attendees are.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_guestsCanInviteOthers\",\n            display_name=\"Guests Can Invite Others\",\n            info=\"Whether attendees other than the organizer can invite others to the event.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_location\",\n            display_name=\"Location\",\n            info=\"Geographic location of the event as free-form text.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_summary\",\n            display_name=\"Summary/Title\",\n            info=\"Summary (title) of the event.\",\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_transparency\",\n            display_name=\"Event Transparency\",\n            info=\"'opaque' (busy) or 'transparent' (available).\",\n            show=False,\n            value=\"opaque\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_visibility\",\n            display_name=\"Event Visibility\",\n            info=\"Event visibility: 'default', 'public', 'private', or 'confidential'.\",\n            show=False,\n            value=\"default\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_timezone\",\n            display_name=\"Timezone\",\n            info=\"IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC.\",  # noqa: E501\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_recurrence\",\n            display_name=\"Recurrence\",\n            info=\"List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_guests_can_modify\",\n            display_name=\"Guests Can Modify\",\n            info=\"If True, guests can modify the event.\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_attendees\",\n            display_name=\"Attendees\",\n            info=\"List of attendee emails (strings).\",\n            show=False,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_send_updates\",\n            display_name=\"Send Updates\",\n            info=\"Defaults to True. Whether to send updates to the attendees.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_start_datetime\",\n            display_name=\"Start Datetime\",\n            info=\"Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'\",\n            show=False,\n            required=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_event_duration_hour\",\n            display_name=\"Event Duration Hour\",\n            info=\"Number of hours (0-24).\",\n            show=False,\n            value=0,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_event_duration_minutes\",\n            display_name=\"Event Duration Minutes\",\n            info=\"Number of minutes (0-59).\",\n            show=False,\n            value=30,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_CREATE_EVENT_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"The ID of the Google Calendar. `primary` for interacting with the primary calendar.\",\n            show=False,\n            value=\"primary\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_DELETE_EVENT_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"ID of the Google Calendar\",\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_DELETE_EVENT_event_id\",\n            display_name=\"Event Id\",\n            info=\"ID of the event to be deleted\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_time_min\",\n            display_name=\"Time Min\",\n            info=\"The start datetime of the interval for the query. Supports multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_time_max\",\n            display_name=\"Time Max\",\n            info=\"The end datetime of the interval for the query. Supports multiple formats:, 1. ISO format with timezone (e.g., 2024-12-06T13:00:00Z), 2. Comma-separated format (e.g., 2024,12,06,13,00,00), 3. Simple datetime format (e.g., 2024-12-06 13:00:00)\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_timezone\",\n            display_name=\"Timezone\",\n            info=\"Time zone used in the response. Optional. The default is UTC.\",\n            show=False,\n            value=\"UTC\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_group_expansion_max\",\n            display_name=\"Group Expansion Max\",\n            info=\"Maximal number of calendar identifiers to be provided for a single group. Optional. An error is returned for a group with more members than this value. Maximum value is 100.\",  # noqa: E501\n            show=False,\n            value=100,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_calendar_expansion_max\",\n            display_name=\"Calendar Expansion Max\",\n            info=\"Maximal number of calendars for which FreeBusy information is to be provided. Optional. Maximum value is 50.\",  # noqa: E501\n            show=False,\n            value=50,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_FIND_FREE_SLOTS_items\",\n            display_name=\"Items\",\n            info=\"List of calendars ids for which to fetch\",\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_QUICK_ADD_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"Calendar identifier. To list calendars to retrieve calendar IDs use relevant tools. To access the primary calendar of the currently logged in user, use the 'primary' keyword.\",  # noqa: E501\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_QUICK_ADD_text\",\n            display_name=\"Text\",\n            info=\"The text describing the event to be created.\",\n            show=False,\n            value=\"\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_QUICK_ADD_send_updates\",\n            display_name=\"Send Updates\",\n            info=\"Guests who should receive notifications about the creation of the new event. Accepted fields include 'all', 'none', 'externalOnly'\",  # noqa: E501\n            show=False,\n            value=\"none\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_PATCH_CALENDAR_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"The ID of the Google Calendar that needs to be updated.\",\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_PATCH_CALENDAR_description\",\n            display_name=\"Description\",\n            info=\"Description of the calendar. Optional.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_PATCH_CALENDAR_location\",\n            display_name=\"Location\",\n            info=\"Geographic location of the calendar as free-form text.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_PATCH_CALENDAR_summary\",\n            display_name=\"Title/Summary\",\n            info=\"Title of the calendar. This field is required and cannot be left blank as per the Google Calendar API requirements.\",  # noqa: E501\n            show=False,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_PATCH_CALENDAR_timezone\",\n            display_name=\"Timezone\",\n            info=\"The time zone of the calendar. (Formatted as an IANA Time Zone Database name, e.g. 'Europe/Zurich').\",\n            show=False,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_GET_CURRENT_DATE_TIME_timezone\",\n            display_name=\"Timezone\",\n            info=\"The timezone offset from UTC to retrieve current date and time, like for location of UTC+6, you give 6, for UTC -9, your give -9.\",  # noqa: E501\n            show=False,\n            value=0,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_description\",\n            display_name=\"Description\",\n            info=\"Description of the event. Can contain HTML. Optional.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_eventType\",\n            display_name=\"EventType\",\n            info=\"Type of the event, immutable post-creation. Currently, only 'default' and 'workingLocation' can be created.\",  # noqa: E501\n            show=False,\n            value=\"default\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_create_meeting_room\",\n            display_name=\"Create Meeting Room\",\n            info=\"If true, a Google Meet link is created and added to the event.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_guestsCanSeeOtherGuests\",\n            display_name=\"Guests Can See Other Guests\",\n            info=\"Whether attendees other than the organizer can see who the event's attendees are.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_guestsCanInviteOthers\",\n            display_name=\"Guests Can Invite Others\",\n            info=\"Whether attendees other than the organizer can invite others to the event.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_location\",\n            display_name=\"Location\",\n            info=\"Geographic location of the event as free-form text.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_summary\",\n            display_name=\"Summary/Title\",\n            info=\"Summary (title) of the event.\",\n            show=False,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_transparency\",\n            display_name=\"Event Transparency\",\n            info=\"'opaque' (busy) or 'transparent' (available).\",\n            show=False,\n            value=\"opaque\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_visibility\",\n            display_name=\"Event Visibility\",\n            info=\"Event visibility: 'default', 'public', 'private', or 'confidential'.\",\n            show=False,\n            value=\"default\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_timezone\",\n            display_name=\"Timezone\",\n            info=\"IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC.\",  # noqa: E501\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_recurrence\",\n            display_name=\"Recurrence\",\n            info=\"List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events.\",\n            show=False,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_guests_can_modify\",\n            display_name=\"Guests Can Modify\",\n            info=\"If True, guests can modify the event.\",\n            show=False,\n            value=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_attendees\",\n            display_name=\"Attendees\",\n            info=\"List of attendee emails (strings).\",\n            show=False,\n        ),\n        BoolInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_send_updates\",\n            display_name=\"Send Updates\",\n            info=\"Defaults to True. Whether to send updates to the attendees.\",\n            show=False,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_start_datetime\",\n            display_name=\"Start Datetime\",\n            info=\"Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'\",\n            show=False,\n            required=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_event_duration_hour\",\n            display_name=\"Event Duration Hour\",\n            info=\"Number of hours (0-24).\",\n            show=False,\n            value=0,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_event_duration_minutes\",\n            display_name=\"Event Duration Minutes\",\n            info=\"Number of minutes (0-59).\",\n            show=False,\n            value=30,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_calendar_id\",\n            display_name=\"Calendar Id\",\n            info=\"ID of the Google Calendar\",\n            show=False,\n            value=\"primary\",\n        ),\n        MessageTextInput(\n            name=\"GOOGLECALENDAR_UPDATE_EVENT_event_id\",\n            display_name=\"Event Id\",\n            info=\"ID of the event to be updated\",\n            show=False,\n            required=True,\n        ),\n    ]\n\n    def execute_action(self):\n        \"\"\"Execute action and return response as Message.\"\"\"\n        toolset = self._build_wrapper()\n\n        try:\n            self._build_action_maps()\n            # Get the display name from the action list\n            display_name = self.action[0][\"name\"] if isinstance(self.action, list) and self.action else self.action\n            # Use the display_to_key_map to get the action key\n            action_key = self._display_to_key_map.get(display_name)\n            if not action_key:\n                msg = f\"Invalid action: {display_name}\"\n                raise ValueError(msg)\n\n            enum_name = getattr(Action, action_key)\n            params = {}\n            if action_key in self._actions_data:\n                for field in self._actions_data[action_key][\"action_fields\"]:\n                    value = getattr(self, field)\n\n                    if value is None or value == \"\":\n                        continue\n\n                    if field in self._list_variables and value:\n                        value = [item.strip() for item in value.split(\",\")]\n\n                    if field in self._bool_variables:\n                        value = bool(value)\n\n                    param_name = field.replace(action_key + \"_\", \"\")\n                    params[param_name] = value\n\n            result = toolset.execute_action(\n                action=enum_name,\n                params=params,\n            )\n            if not result.get(\"successful\"):\n                message_str = result.get(\"error\", {})\n                return {\"error\": message_str}\n\n            result_data = result.get(\"data\", [])\n            if (\n                len(result_data) != 1\n                and not self._actions_data.get(action_key, {}).get(\"result_field\")\n                and self._actions_data.get(action_key, {}).get(\"get_result_field\")\n            ):\n                msg = f\"Expected a dict with a single key, got {len(result_data)} keys: {result_data.keys()}\"\n                raise ValueError(msg)\n            if action_key == \"GOOGLECALENDAR_GET_CURRENT_DATE_TIME\":\n                return result_data\n            return result_data[next(iter(result_data))]\n        except Exception as e:\n            logger.error(f\"Error executing action: {e}\")\n            display_name = self.action[0][\"name\"] if isinstance(self.action, list) and self.action else str(self.action)\n            msg = f\"Failed to execute {display_name}: {e!s}\"\n            raise ValueError(msg) from e\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:\n        return super().update_build_config(build_config, field_value, field_name)\n"
              },
              "entity_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Entity ID",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "entity_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "default"
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "attendees": {
                        "default": null,
                        "description": "List of attendee emails (strings).",
                        "examples": [],
                        "items": {
                          "type": "string"
                        },
                        "title": "Attendees",
                        "type": "array"
                      },
                      "calendar_id": {
                        "default": "primary",
                        "description": "Target calendar: 'primary' for the user's main calendar, or the calendar's email address. Please provide a value of type string.",
                        "examples": [
                          "primary",
                          "user@example.com",
                          "abcdefghijklmnopqrstuvwxyz@group.calendar.google.com"
                        ],
                        "title": "Calendar Id",
                        "type": "string"
                      },
                      "create_meeting_room": {
                        "default": null,
                        "description": "If true, a Google Meet link is created and added to the event. CRITICAL: As of 2024, this REQUIRES a paid Google Workspace account ($13+/month). Personal Gmail accounts will fail with 'Invalid conference type value' error. Solutions: 1) Upgrade to Workspace, 2) Use domain-wide delegation with Workspace user, 3) Use the new Google Meet REST API, or 4) Create events without conferences. See https://github.com/googleapis/google-api-nodejs-client/issues/3234. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Create Meeting Room",
                        "type": "boolean"
                      },
                      "description": {
                        "default": null,
                        "description": "Description of the event. Can contain HTML. Optional. Please provide a value of type string.",
                        "examples": [],
                        "title": "Description",
                        "type": "string"
                      },
                      "eventType": {
                        "default": "default",
                        "description": "Type of the event, immutable post-creation. Supported types: 'birthday' (all-day with annual recurrence), 'default' (regular event), 'focusTime' (focus-time event), 'outOfOffice' (out-of-office event), 'workingLocation' (working location event). Note: 'fromGmail' events cannot be created via API. Please provide a value of type string.",
                        "examples": [],
                        "title": "Eventtype",
                        "type": "string"
                      },
                      "event_duration_hour": {
                        "default": 0,
                        "description": "Number of hours (0-24). Increase by 1 here rather than passing 60 in `event_duration_minutes`. Please provide a value of type integer.",
                        "examples": [],
                        "title": "Event Duration Hour",
                        "type": "integer"
                      },
                      "event_duration_minutes": {
                        "default": 30,
                        "description": "Duration in minutes (0-59 ONLY). NEVER use 60+ minutes - use event_duration_hour=1 instead. Maximum value is 59. Please provide a value of type integer.",
                        "examples": [],
                        "title": "Event Duration Minutes",
                        "type": "integer"
                      },
                      "exclude_organizer": {
                        "default": false,
                        "description": "If True, the organizer will NOT be added as an attendee. Default is False (organizer is included). Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Exclude Organizer",
                        "type": "boolean"
                      },
                      "guestsCanInviteOthers": {
                        "default": null,
                        "description": "Whether attendees other than the organizer can invite others to the event. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Guestscaninviteothers",
                        "type": "boolean"
                      },
                      "guestsCanSeeOtherGuests": {
                        "default": null,
                        "description": "Whether attendees other than the organizer can see who the event's attendees are. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Guestscanseeotherguests",
                        "type": "boolean"
                      },
                      "guests_can_modify": {
                        "default": false,
                        "description": "If True, guests can modify the event. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Guests Can Modify",
                        "type": "boolean"
                      },
                      "location": {
                        "default": null,
                        "description": "Geographic location of the event as free-form text. Please provide a value of type string.",
                        "examples": [],
                        "title": "Location",
                        "type": "string"
                      },
                      "recurrence": {
                        "default": null,
                        "description": "List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events. Supported frequencies are DAILY, WEEKLY, MONTHLY, YEARLY.",
                        "examples": [],
                        "items": {
                          "type": "string"
                        },
                        "title": "Recurrence",
                        "type": "array"
                      },
                      "send_updates": {
                        "default": null,
                        "description": "Defaults to True. Whether to send updates to the attendees. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Send Updates",
                        "type": "boolean"
                      },
                      "start_datetime": {
                        "description": "Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'. Please provide a value of type string. This parameter is required.",
                        "examples": [],
                        "title": "Start Datetime",
                        "type": "string"
                      },
                      "summary": {
                        "default": null,
                        "description": "Summary (title) of the event. Please provide a value of type string.",
                        "examples": [],
                        "title": "Summary",
                        "type": "string"
                      },
                      "timezone": {
                        "default": null,
                        "description": "IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC. Please provide a value of type string.",
                        "examples": [],
                        "title": "Timezone",
                        "type": "string"
                      },
                      "transparency": {
                        "default": "opaque",
                        "description": "'opaque' (busy) or 'transparent' (available). Please provide a value of type string.",
                        "examples": [],
                        "title": "Transparency",
                        "type": "string"
                      },
                      "visibility": {
                        "default": "default",
                        "description": "Event visibility: 'default', 'public', 'private', or 'confidential'. Please provide a value of type string.",
                        "examples": [],
                        "title": "Visibility",
                        "type": "string"
                      },
                      "workingLocationProperties": {
                        "default": null,
                        "description": "Working location properties for workingLocation events. Must include 'type' field with value: 'homeOffice', 'officeLocation', or 'customLocation'.",
                        "examples": [],
                        "title": "Workinglocationproperties",
                        "type": "object"
                      }
                    },
                    "description": "Creates an event on a google calendar, needing rfc3339 utc start/end times (end after start) and write access to the calendar. by default, adds the organizer as an attendee unless exclude organizer is set to true.",
                    "display_description": "Creates an event on a google calendar, needing rfc3339 utc start/end times (end after start) and write access to the calendar. by default, adds the organizer as an attendee unless exclude organizer is set to true.",
                    "display_name": "Create Event",
                    "name": "googlecalendar_create_event",
                    "readonly": true,
                    "status": true,
                    "tags": [
                      "GOOGLECALENDAR_CREATE_EVENT"
                    ]
                  },
                  {
                    "args": {
                      "calendar_id": {
                        "default": "primary",
                        "description": "Identifier of the Google Calendar (e.g., email address, specific ID, or 'primary' for the authenticated user's main calendar) from which the event will be deleted. Please provide a value of type string.",
                        "examples": [
                          "primary",
                          "user@example.com",
                          "abcsomecalendarid@group.calendar.google.com"
                        ],
                        "title": "Calendar Id",
                        "type": "string"
                      },
                      "event_id": {
                        "description": "Unique identifier of the event to delete, typically obtained upon event creation. Please provide a value of type string. This parameter is required.",
                        "examples": [],
                        "title": "Event Id",
                        "type": "string"
                      }
                    },
                    "description": "Deletes a specified event by `event id` from a google calendar (`calendar id`); this action is idempotent and raises a 404 error if the event is not found.",
                    "display_description": "Deletes a specified event by `event id` from a google calendar (`calendar id`); this action is idempotent and raises a 404 error if the event is not found.",
                    "display_name": "Delete Event",
                    "name": "googlecalendar_delete_event",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_DELETE_EVENT"
                    ]
                  },
                  {
                    "args": {
                      "summary": {
                        "default": "",
                        "description": "Title for the new Google Calendar to be created. If an empty string is provided, the calendar will be created without a title. Please provide a value of type string.",
                        "examples": [
                          "Project Alpha Tasks",
                          "Marketing Team Q4",
                          "Personal Appointments"
                        ],
                        "title": "Summary",
                        "type": "string"
                      }
                    },
                    "description": "Creates a new, empty google calendar with the specified title (summary).",
                    "display_description": "Creates a new, empty google calendar with the specified title (summary).",
                    "display_name": "Duplicate Calendar",
                    "name": "googlecalendar_duplicate_calendar",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_DUPLICATE_CALENDAR"
                    ]
                  },
                  {
                    "args": {
                      "calendar_id": {
                        "default": "primary",
                        "description": "Identifier of the Google Calendar to query. Use 'primary' for the primary calendar of the authenticated user, an email address for a specific user's calendar, or a calendar ID for other calendars. Please provide a value of type string.",
                        "examples": [
                          "primary",
                          "user@example.com",
                          "abc...@group.calendar.google.com"
                        ],
                        "title": "Calendar Id",
                        "type": "string"
                      },
                      "event_types": {
                        "default": [
                          "birthday",
                          "default",
                          "focusTime",
                          "outOfOffice",
                          "workingLocation"
                        ],
                        "description": "Event types to include: 'default' (regular event), 'focusTime' (focused work time), 'outOfOffice' (out-of-office time).",
                        "examples": [
                          "default",
                          "focusTime",
                          "outOfOffice"
                        ],
                        "items": {
                          "type": "string"
                        },
                        "title": "Event Types",
                        "type": "array"
                      },
                      "max_results": {
                        "default": 10,
                        "description": "Maximum number of events per page (1-2500). Please provide a value of type integer.",
                        "examples": [],
                        "title": "Max Results",
                        "type": "integer"
                      },
                      "order_by": {
                        "default": null,
                        "description": "Order of events: 'startTime' (ascending by start time) or 'updated' (ascending by last modification time). Please provide a value of type string.",
                        "examples": [
                          "startTime",
                          "updated"
                        ],
                        "title": "Order By",
                        "type": "string"
                      },
                      "page_token": {
                        "default": null,
                        "description": "Token from a previous response's `nextPageToken` to fetch the subsequent page of results. Please provide a value of type string.",
                        "examples": [],
                        "title": "Page Token",
                        "type": "string"
                      },
                      "query": {
                        "default": null,
                        "description": "Free-text search terms to find events. This query is matched against various event fields including summary, description, location, attendees' details (displayName, email), and organizer's details. Please provide a value of type string.",
                        "examples": [
                          "Project Alpha Review",
                          "Birthday Party",
                          "Q3 Planning session"
                        ],
                        "title": "Query",
                        "type": "string"
                      },
                      "show_deleted": {
                        "default": null,
                        "description": "Include deleted events (status 'cancelled') in the result. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Show Deleted",
                        "type": "boolean"
                      },
                      "single_events": {
                        "default": true,
                        "description": "Expand recurring events into individual instances. If false, returns master recurring events. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Single Events",
                        "type": "boolean"
                      },
                      "timeMax": {
                        "default": null,
                        "description": "Upper bound (exclusive) for an event's start time to filter by. Only events starting before this time are included. Accepts multiple formats:\n1. RFC3339 timestamp (e.g., '2024-12-06T13:00:00Z')\n2. Comma-separated date/time parts (e.g., '2024,12,06,13,00,00')\n3. Simple datetime string (e.g., '2024-12-06 13:00:00'). Please provide a value of type string.",
                        "examples": [
                          "2024-12-31T23:59:59Z",
                          "2025-01-01 10:00:00"
                        ],
                        "title": "Timemax",
                        "type": "string"
                      },
                      "timeMin": {
                        "default": null,
                        "description": "Lower bound (exclusive) for an event's end time to filter by. Only events ending after this time are included. Accepts multiple formats:\n1. RFC3339 timestamp (e.g., '2024-12-06T13:00:00Z')\n2. Comma-separated date/time parts (e.g., '2024,12,06,13,00,00')\n3. Simple datetime string (e.g., '2024-12-06 13:00:00'). Please provide a value of type string.",
                        "examples": [
                          "2024-01-01T00:00:00Z",
                          "2024-06-15 09:00:00"
                        ],
                        "title": "Timemin",
                        "type": "string"
                      },
                      "updated_min": {
                        "default": null,
                        "description": "Lower bound (exclusive) for an event's last modification time to filter by. Only events updated after this time are included. When specified, events deleted since this time are also included, regardless of the `show_deleted` parameter. Accepts multiple formats:\n1. RFC3339 timestamp (e.g., '2024-12-06T13:00:00Z')\n2. Comma-separated date/time parts (e.g., '2024,12,06,13,00,00')\n3. Simple datetime string (e.g., '2024-12-06 13:00:00'). Please provide a value of type string.",
                        "examples": [
                          "2024-07-01T00:00:00Z"
                        ],
                        "title": "Updated Min",
                        "type": "string"
                      }
                    },
                    "description": "Finds events in a specified google calendar using text query, time ranges (event start/end, last modification), and event types; ensure `timemin` is not chronologically after `timemax` if both are provided.",
                    "display_description": "Finds events in a specified google calendar using text query, time ranges (event start/end, last modification), and event types; ensure `timemin` is not chronologically after `timemax` if both are provided.",
                    "display_name": "Find Event",
                    "name": "googlecalendar_find_event",
                    "readonly": true,
                    "status": true,
                    "tags": [
                      "GOOGLECALENDAR_FIND_EVENT"
                    ]
                  },
                  {
                    "args": {
                      "calendar_expansion_max": {
                        "default": 50,
                        "description": "Maximum calendars for which FreeBusy information is provided. Max allowed: 50. Please provide a value of type integer.",
                        "examples": [],
                        "title": "Calendar Expansion Max",
                        "type": "integer"
                      },
                      "group_expansion_max": {
                        "default": 100,
                        "description": "Maximum calendar identifiers to return for a single group; exceeding this causes an error. Max allowed: 100. Please provide a value of type integer.",
                        "examples": [],
                        "title": "Group Expansion Max",
                        "type": "integer"
                      },
                      "items": {
                        "default": [
                          "primary"
                        ],
                        "description": "List of calendar identifiers (primary ID 'primary', user/calendar email, or unique calendar ID) to query for free/busy information.",
                        "examples": [
                          "primary",
                          "user@example.com",
                          "unique_calendar_id@group.calendar.google.com"
                        ],
                        "items": {
                          "type": "string"
                        },
                        "title": "Items",
                        "type": "array"
                      },
                      "time_max": {
                        "default": null,
                        "description": "End datetime for the query interval. Accepts ISO, comma-separated, or simple datetime formats. Please provide a value of type string.",
                        "examples": [
                          "2024-12-06T18:00:00Z",
                          "2024,12,06,18,00,00",
                          "2024-12-06 18:00:00"
                        ],
                        "title": "Time Max",
                        "type": "string"
                      },
                      "time_min": {
                        "default": null,
                        "description": "Start datetime for the query interval. Accepts ISO, comma-separated, or simple datetime formats. Please provide a value of type string.",
                        "examples": [
                          "2024-12-06T13:00:00Z",
                          "2024,12,06,13,00,00",
                          "2024-12-06 13:00:00"
                        ],
                        "title": "Time Min",
                        "type": "string"
                      },
                      "timezone": {
                        "default": "UTC",
                        "description": "IANA timezone identifier (e.g., 'America/New_York', 'Europe/London') for interpreting `time_min` and `time_max` if they lack timezone info, and for expanding recurring events. Please provide a value of type string.",
                        "examples": [
                          "UTC",
                          "America/New_York",
                          "Europe/Berlin"
                        ],
                        "title": "Timezone",
                        "type": "string"
                      }
                    },
                    "description": "Finds both free and busy time slots in google calendars for specified calendars within a defined time range (defaults to the current day utc if `time min`/`time max` are omitted). returns busy intervals enriched with event details and calculates free slots by finding gaps between busy periods; `time min` must precede `time max` if both are provided. this action retrieves free and busy time slots for the specified calendars over a given time period. it analyzes the busy intervals from the calendars and provides calculated free slots based on the gaps in the busy periods.",
                    "display_description": "Finds both free and busy time slots in google calendars for specified calendars within a defined time range (defaults to the current day utc if `time min`/`time max` are omitted). returns busy intervals enriched with event details and calculates free slots by finding gaps between busy periods; `time min` must precede `time max` if both are provided. this action retrieves free and busy time slots for the specified calendars over a given time period. it analyzes the busy intervals from the calendars and provides calculated free slots based on the gaps in the busy periods.",
                    "display_name": "Find Free Slots",
                    "name": "googlecalendar_find_free_slots",
                    "readonly": true,
                    "status": true,
                    "tags": [
                      "GOOGLECALENDAR_FIND_FREE_SLOTS"
                    ]
                  },
                  {
                    "args": {
                      "calendar_id": {
                        "default": "primary",
                        "description": "Identifier of the Google Calendar to retrieve. 'primary' (the default) represents the user's main calendar; other valid identifiers include the calendar's email address. Please provide a value of type string.",
                        "examples": [
                          "primary",
                          "user@example.com",
                          "en.usa#holiday@group.v.calendar.google.com"
                        ],
                        "title": "Calendar Id",
                        "type": "string"
                      }
                    },
                    "description": "Retrieves a specific google calendar, identified by `calendar id`, to which the authenticated user has access.",
                    "display_description": "Retrieves a specific google calendar, identified by `calendar id`, to which the authenticated user has access.",
                    "display_name": "Fetch Google Calendar",
                    "name": "googlecalendar_get_calendar",
                    "readonly": true,
                    "status": true,
                    "tags": [
                      "GOOGLECALENDAR_GET_CALENDAR"
                    ]
                  },
                  {
                    "args": {
                      "timezone": {
                        "default": 0,
                        "description": "Timezone offset from UTC in hours (e.g., 6 for UTC+6, -9 for UTC-9, 5.5 for UTC+5:30). Default 0 is UTC. Please provide a value of type number.",
                        "examples": [
                          "6",
                          "-9",
                          "0",
                          "5.5"
                        ],
                        "title": "Timezone",
                        "type": "number"
                      }
                    },
                    "description": "Gets the current date and time, allowing for a specific timezone offset.",
                    "display_description": "Gets the current date and time, allowing for a specific timezone offset.",
                    "display_name": "Get Current Date And Time",
                    "name": "googlecalendar_get_current_date_time",
                    "readonly": true,
                    "status": true,
                    "tags": [
                      "GOOGLECALENDAR_GET_CURRENT_DATE_TIME"
                    ]
                  },
                  {
                    "args": {
                      "max_results": {
                        "default": 10,
                        "description": "Maximum number of calendars to return per page. Max 250. Please provide a value of type integer.",
                        "examples": [
                          25,
                          100
                        ],
                        "title": "Max Results",
                        "type": "integer"
                      },
                      "min_access_role": {
                        "default": null,
                        "description": "Minimum access role for calendars returned. Valid values: 'freeBusyReader', 'owner', 'reader', 'writer'. Please provide a value of type string.",
                        "examples": [
                          "reader",
                          "owner"
                        ],
                        "title": "Min Access Role",
                        "type": "string"
                      },
                      "page_token": {
                        "default": null,
                        "description": "Token for the page of results to return, from a previous response. Please provide a value of type string.",
                        "examples": [
                          " nextPageToken123"
                        ],
                        "title": "Page Token",
                        "type": "string"
                      },
                      "show_deleted": {
                        "default": false,
                        "description": "Include deleted calendars in the result. Please provide a value of type boolean.",
                        "examples": [
                          true,
                          false
                        ],
                        "title": "Show Deleted",
                        "type": "boolean"
                      },
                      "show_hidden": {
                        "default": false,
                        "description": "Include calendars not typically shown in the UI. Please provide a value of type boolean.",
                        "examples": [
                          true,
                          false
                        ],
                        "title": "Show Hidden",
                        "type": "boolean"
                      },
                      "sync_token": {
                        "default": null,
                        "description": "Sync token from a previous list request to get only changed entries; showDeleted, showHidden, and pageToken are ignored if provided. Please provide a value of type string.",
                        "examples": [
                          "syncToken123"
                        ],
                        "title": "Sync Token",
                        "type": "string"
                      }
                    },
                    "description": "Retrieves calendars from the user's google calendar list, with options for pagination and filtering.",
                    "display_description": "Retrieves calendars from the user's google calendar list, with options for pagination and filtering.",
                    "display_name": "List Google Calendars",
                    "name": "googlecalendar_list_calendars",
                    "readonly": true,
                    "status": true,
                    "tags": [
                      "GOOGLECALENDAR_LIST_CALENDARS"
                    ]
                  },
                  {
                    "args": {
                      "calendar_id": {
                        "description": "Identifier of the Google Calendar to update; use 'primary' for the main calendar or a specific ID. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "primary",
                          "secondaryCalendarIdAbc...",
                          "example@group.calendar.google.com"
                        ],
                        "title": "Calendar Id",
                        "type": "string"
                      },
                      "description": {
                        "default": null,
                        "description": "New description for the calendar. Please provide a value of type string.",
                        "examples": [],
                        "title": "Description",
                        "type": "string"
                      },
                      "location": {
                        "default": null,
                        "description": "New geographic location of the calendar (e.g., 'Paris, France'). Please provide a value of type string.",
                        "examples": [
                          "Paris, France",
                          "London"
                        ],
                        "title": "Location",
                        "type": "string"
                      },
                      "summary": {
                        "description": "New title for the calendar; cannot be an empty string. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "Team Meetings",
                          "Project Alpha Milestones"
                        ],
                        "title": "Summary",
                        "type": "string"
                      },
                      "timezone": {
                        "default": null,
                        "description": "New IANA Time Zone Database name for the calendar (e.g., 'Europe/Zurich', 'America/New_York'). Please provide a value of type string.",
                        "examples": [
                          "Europe/Zurich",
                          "America/New_York",
                          "Asia/Tokyo"
                        ],
                        "title": "Timezone",
                        "type": "string"
                      }
                    },
                    "description": "Partially updates (patches) an existing google calendar, modifying only the fields provided; `summary` is mandatory and cannot be an empty string, and an empty string for `description` or `location` clears them.",
                    "display_description": "Partially updates (patches) an existing google calendar, modifying only the fields provided; `summary` is mandatory and cannot be an empty string, and an empty string for `description` or `location` clears them.",
                    "display_name": "Patch Calendar",
                    "name": "googlecalendar_patch_calendar",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_PATCH_CALENDAR"
                    ]
                  },
                  {
                    "args": {
                      "calendar_id": {
                        "default": "primary",
                        "description": "Identifier of the calendar for the event. Use 'primary' for the main calendar, or provide a specific calendar ID (e.g., email address). Please provide a value of type string.",
                        "examples": [
                          "primary",
                          "user@example.com",
                          "xxxxxxxxxxxxxxxxx@group.calendar.google.com"
                        ],
                        "title": "Calendar Id",
                        "type": "string"
                      },
                      "send_updates": {
                        "default": "none",
                        "description": "Controls whether email notifications about the event creation are sent to attendees. Please provide a value of type string.",
                        "examples": [],
                        "title": "Send Updates",
                        "type": "string"
                      },
                      "text": {
                        "default": "",
                        "description": "Natural language input describing the event; Google Calendar parses this for event details like title, date, and time. Please provide a value of type string.",
                        "examples": [
                          "Appointment at Somewhere on June 3rd 10am-10:25am",
                          "Dentist appointment tomorrow at 2pm for 45 minutes"
                        ],
                        "title": "Text",
                        "type": "string"
                      }
                    },
                    "description": "Parses natural language text to quickly create a basic google calendar event with its title, date, and time, suitable for simple scheduling; does not support direct attendee addition or recurring events, and `calendar id` must be valid if not 'primary'.",
                    "display_description": "Parses natural language text to quickly create a basic google calendar event with its title, date, and time, suitable for simple scheduling; does not support direct attendee addition or recurring events, and `calendar id` must be valid if not 'primary'.",
                    "display_name": "Quick Add Event",
                    "name": "googlecalendar_quick_add",
                    "readonly": true,
                    "status": true,
                    "tags": [
                      "GOOGLECALENDAR_QUICK_ADD"
                    ]
                  },
                  {
                    "args": {
                      "attendee_email": {
                        "description": "Email address of the attendee to remove; if the email does not match an existing attendee, the event remains unchanged. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "john@gmail.com"
                        ],
                        "title": "Attendee Email",
                        "type": "string"
                      },
                      "calendar_id": {
                        "default": "primary",
                        "description": "Identifier of the Google Calendar to which the event belongs; 'primary' signifies the user's main calendar. Please provide a value of type string.",
                        "examples": [],
                        "title": "Calendar Id",
                        "type": "string"
                      },
                      "event_id": {
                        "description": "Unique identifier of the event. Please provide a value of type string. This parameter is required.",
                        "examples": [],
                        "title": "Event Id",
                        "type": "string"
                      }
                    },
                    "description": "Removes an attendee from a specified event in a google calendar; the calendar and event must exist.",
                    "display_description": "Removes an attendee from a specified event in a google calendar; the calendar and event must exist.",
                    "display_name": "Remove Attendee From Event",
                    "name": "googlecalendar_remove_attendee",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_REMOVE_ATTENDEE"
                    ]
                  },
                  {
                    "args": {
                      "attendees": {
                        "default": null,
                        "description": "List of attendee emails (strings).",
                        "examples": [],
                        "items": {
                          "type": "string"
                        },
                        "title": "Attendees",
                        "type": "array"
                      },
                      "calendar_id": {
                        "default": "primary",
                        "description": "Identifier of the Google Calendar where the event resides. The value 'primary' targets the user's primary calendar. Please provide a value of type string.",
                        "examples": [
                          "primary",
                          "user@example.com",
                          "long_calendar_id@group.calendar.google.com"
                        ],
                        "title": "Calendar Id",
                        "type": "string"
                      },
                      "create_meeting_room": {
                        "default": null,
                        "description": "If true, a Google Meet link is created and added to the event. CRITICAL: As of 2024, this REQUIRES a paid Google Workspace account ($13+/month). Personal Gmail accounts will fail with 'Invalid conference type value' error. Solutions: 1) Upgrade to Workspace, 2) Use domain-wide delegation with Workspace user, 3) Use the new Google Meet REST API, or 4) Create events without conferences. See https://github.com/googleapis/google-api-nodejs-client/issues/3234. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Create Meeting Room",
                        "type": "boolean"
                      },
                      "description": {
                        "default": null,
                        "description": "Description of the event. Can contain HTML. Optional. Please provide a value of type string.",
                        "examples": [],
                        "title": "Description",
                        "type": "string"
                      },
                      "eventType": {
                        "default": "default",
                        "description": "Type of the event, immutable post-creation. Supported types: 'birthday' (all-day with annual recurrence), 'default' (regular event), 'focusTime' (focus-time event), 'outOfOffice' (out-of-office event), 'workingLocation' (working location event). Note: 'fromGmail' events cannot be created via API. Please provide a value of type string.",
                        "examples": [],
                        "title": "Eventtype",
                        "type": "string"
                      },
                      "event_duration_hour": {
                        "default": 0,
                        "description": "Number of hours (0-24). Increase by 1 here rather than passing 60 in `event_duration_minutes`. Please provide a value of type integer.",
                        "examples": [],
                        "title": "Event Duration Hour",
                        "type": "integer"
                      },
                      "event_duration_minutes": {
                        "default": 30,
                        "description": "Duration in minutes (0-59 ONLY). NEVER use 60+ minutes - use event_duration_hour=1 instead. Maximum value is 59. Please provide a value of type integer.",
                        "examples": [],
                        "title": "Event Duration Minutes",
                        "type": "integer"
                      },
                      "event_id": {
                        "description": "The unique identifier of the event to be updated. Please provide a value of type string. This parameter is required.",
                        "examples": [
                          "a1b2c3d4e5f6g7h8i9j0k1l2m3"
                        ],
                        "title": "Event Id",
                        "type": "string"
                      },
                      "guestsCanInviteOthers": {
                        "default": null,
                        "description": "Whether attendees other than the organizer can invite others to the event. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Guestscaninviteothers",
                        "type": "boolean"
                      },
                      "guestsCanSeeOtherGuests": {
                        "default": null,
                        "description": "Whether attendees other than the organizer can see who the event's attendees are. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Guestscanseeotherguests",
                        "type": "boolean"
                      },
                      "guests_can_modify": {
                        "default": false,
                        "description": "If True, guests can modify the event. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Guests Can Modify",
                        "type": "boolean"
                      },
                      "location": {
                        "default": null,
                        "description": "Geographic location of the event as free-form text. Please provide a value of type string.",
                        "examples": [],
                        "title": "Location",
                        "type": "string"
                      },
                      "recurrence": {
                        "default": null,
                        "description": "List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events. Supported frequencies are DAILY, WEEKLY, MONTHLY, YEARLY.",
                        "examples": [],
                        "items": {
                          "type": "string"
                        },
                        "title": "Recurrence",
                        "type": "array"
                      },
                      "send_updates": {
                        "default": null,
                        "description": "Defaults to True. Whether to send updates to the attendees. Please provide a value of type boolean.",
                        "examples": [],
                        "title": "Send Updates",
                        "type": "boolean"
                      },
                      "start_datetime": {
                        "description": "Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'. Please provide a value of type string. This parameter is required.",
                        "examples": [],
                        "title": "Start Datetime",
                        "type": "string"
                      },
                      "summary": {
                        "default": null,
                        "description": "Summary (title) of the event. Please provide a value of type string.",
                        "examples": [],
                        "title": "Summary",
                        "type": "string"
                      },
                      "timezone": {
                        "default": null,
                        "description": "IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC. Please provide a value of type string.",
                        "examples": [],
                        "title": "Timezone",
                        "type": "string"
                      },
                      "transparency": {
                        "default": "opaque",
                        "description": "'opaque' (busy) or 'transparent' (available). Please provide a value of type string.",
                        "examples": [],
                        "title": "Transparency",
                        "type": "string"
                      },
                      "visibility": {
                        "default": "default",
                        "description": "Event visibility: 'default', 'public', 'private', or 'confidential'. Please provide a value of type string.",
                        "examples": [],
                        "title": "Visibility",
                        "type": "string"
                      },
                      "workingLocationProperties": {
                        "default": null,
                        "description": "Working location properties for workingLocation events. Must include 'type' field with value: 'homeOffice', 'officeLocation', or 'customLocation'.",
                        "examples": [],
                        "title": "Workinglocationproperties",
                        "type": "object"
                      }
                    },
                    "description": "Updates an existing event by `event id` in a google calendar; this is a full put replacement, so provide all desired fields as unspecified ones may be cleared or reset.",
                    "display_description": "Updates an existing event by `event id` in a google calendar; this is a full put replacement, so provide all desired fields as unspecified ones may be cleared or reset.",
                    "display_name": "Update Google Event",
                    "name": "googlecalendar_update_event",
                    "readonly": true,
                    "status": false,
                    "tags": [
                      "GOOGLECALENDAR_UPDATE_EVENT"
                    ]
                  }
                ]
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "ComposioGoogleCalendarAPIComponent"
        },
        "dragging": false,
        "id": "ComposioGoogleCalendarAPIComponent-UxH4R",
        "measured": {
          "height": 368,
          "width": 320
        },
        "position": {
          "x": -125.24215858941444,
          "y": 653.0400504374802
        },
        "selected": true,
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 196.82232948862193,
      "y": -80.53699636716027,
      "zoom": 0.7120686033574055
    }
  },
  "description": "Manage Google gmail and Google Calender",
  "endpoint_name": null,
  "id": "4dc30878-57d6-42f5-8163-4305fd7af29a",
  "is_component": false,
  "last_tested_version": "1.5.1",
  "name": "Demo Langflow Project",
  "tags": []
}